if (!window.CQ_Analytics) {
    window.CQ_Analytics = {}
}
CQ_Analytics.Operator = (function () {
    return function () {
    }
})();
CQ_Analytics.Operator.IS = "is";
CQ_Analytics.Operator.EQUALS = "equals";
CQ_Analytics.Operator.NOT_EQUAL = "notequal";
CQ_Analytics.Operator.GREATER = "greater";
CQ_Analytics.Operator.GREATER_OR_EQUAL = "greaterorequal";
CQ_Analytics.Operator.OLDER = "older";
CQ_Analytics.Operator.OLDER_OR_EQUAL = "olderorequal";
CQ_Analytics.Operator.LESS = "less";
CQ_Analytics.Operator.LESS_OR_EQUAL = "lessorequal";
CQ_Analytics.Operator.YOUNGER = "younger";
CQ_Analytics.Operator.YOUNGER_OR_EQUAL = "youngerorequal";
CQ_Analytics.Operator.CONTAINS = "contains";
CQ_Analytics.Operator.BEGINS_WITH = "beginswith";
CQ_Analytics.OperatorActions = function () {
    var mapping = {};
    var addOperator = function (name, text, operation) {
        mapping[name] = [text, operation]
    };
    addOperator(CQ_Analytics.Operator.EQUALS, "equals", "==");
    addOperator(CQ_Analytics.Operator.IS, "is", "==");
    addOperator(CQ_Analytics.Operator.NOT_EQUAL, "is not equal to", "!=");
    addOperator(CQ_Analytics.Operator.GREATER, "is greater than", ">");
    addOperator(CQ_Analytics.Operator.GREATER_OR_EQUAL, "is equal to or greater than", ">=");
    addOperator(CQ_Analytics.Operator.OLDER, "is older than", ">");
    addOperator(CQ_Analytics.Operator.OLDER_OR_EQUAL, "is equal to or older than", ">=");
    addOperator(CQ_Analytics.Operator.LESS, "is less than", "<");
    addOperator(CQ_Analytics.Operator.LESS_OR_EQUAL, "is equal to or less than", "<=");
    addOperator(CQ_Analytics.Operator.YOUNGER, "is younger than", "<");
    addOperator(CQ_Analytics.Operator.YOUNGER_OR_EQUAL, "is equal to or younger than", "<=");
    addOperator(CQ_Analytics.Operator.CONTAINS, "contains", function (s1, s2) {
        if (s1) {
            if (s2) {
                s1 = "" + s1;
                s2 = "" + s2;
                return s1.toLowerCase().indexOf(s2.toLowerCase()) != -1
            }
            return true
        }
        return false
    });
    addOperator(CQ_Analytics.Operator.BEGINS_WITH, "begins with", function (s1, s2) {
        if (s1) {
            if (s2) {
                s1 = "" + s1;
                s2 = "" + s2;
                return s1.toLowerCase().indexOf(s2.toLowerCase()) == 0
            }
            return true
        }
        return false
    });
    var getByIndex = function (op, index) {
        if (mapping[op] && mapping[op][index]) {
            return mapping[op][index]
        }
        return ""
    };
    var escapeQuote = function (str) {
        if (str) {
            str = str.replace(new RegExp("\\'", "ig"), str)
        }
        return str
    };
    return {
        getText: function (operator) {
            return getByIndex(operator, 0)
        }, setText: function (operator, newText) {
            if (mapping[operator] && mapping[operator][0]) {
                mapping[operator][0] = newText
            }
        }, getOperation: function (operator) {
            return getByIndex(operator, 1)
        }, operate: function (object, property, operator, value, valueFormat) {
            try {
                if (object && object[property]) {
                    var toEval = "";
                    var op = this.getOperation(operator);
                    op = op ? op : operator;
                    var objectValue = CQ.shared.XSS.getXSSTablePropertyValue(object, property);
                    if (typeof op == "function") {
                        return op.call(this, objectValue, value, valueFormat)
                    } else {
                        if (valueFormat) {
                            toEval = valueFormat + "('" + objectValue + "') " + op + " " + valueFormat + "('" + value + "')"
                        } else {
                            var s1 = escapeQuote(objectValue);
                            var s2 = escapeQuote(value);
                            toEval = "'" + s1 + "' " + op + " '" + s2 + "'"
                        }
                        var b = eval(toEval);
                        return b
                    }
                }
            } catch (e) {
            }
            return false
        }
    }
}();
CQ_Analytics.Utils = new function () {
    return {
        registerDocumentEventHandler: function (c, b) {
            var a = window.document[c];
            if (typeof window.document[c] != "function") {
                window.document[c] = b
            } else {
                window.document[c] = function (d) {
                    if (a) {
                        a(d)
                    }
                    b(d)
                }
            }
        }, eventWrapper: function (a) {
            return function (d) {
                var c, b;
                if (document.all) {
                    c = window.event.keyCode;
                    b = window.event
                } else {
                    c = (typeof(d.which) != "undefined") ? d.which : 0;
                    b = d
                }
                if (b) {
                    a(b, c)
                }
            }
        }, loadElement: function (a, b) {
            $CQ("#" + b).load(a)
        }, loadTeaserElement: function (a, d) {
            var f = $CQ("#" + d).css("height");
            var g = $CQ("#" + d).height();
            if (g > 0) {
                $CQ("#" + d).css("height", g)
            }
            var j = function (n) {
                if (n && n != "") {
                    var h = $CQ(n).css("display", "none");
                    $CQ("#" + d).append(h);
                    h.fadeIn(function () {
                        if (f && f != "0px") {
                            $CQ("#" + d).css("height", f)
                        }
                    })
                } else {
                    if (f && f != "0px") {
                        $CQ("#" + d).css("height", f)
                    }
                }
            };
            var k = function (h, n) {
                if (!CQ_Analytics.Utils.teasersCache) {
                    CQ_Analytics.Utils.teasersCache = {}
                }
                CQ_Analytics.Utils.teasersCache[h] = n
            };
            var b = function () {
                if (CQ_Analytics.Utils.teasersCache && CQ_Analytics.Utils.teasersCache[a]) {
                    j(CQ_Analytics.Utils.teasersCache[a])
                } else {
                    CQ_Analytics.Utils.teasersLoading = CQ_Analytics.Utils.teasersLoading || {};
                    if (CQ_Analytics.Utils.teasersLoading[a]) {
                        window.setTimeout(function () {
                            CQ_Analytics.Utils.loadTeaserElement(a, d)
                        }, 100)
                    } else {
                        CQ_Analytics.Utils.teasersLoading[a] = true;
                        l()
                    }
                }
            };
            var l = function () {
                var n = a;
                var h = location.href;
                if (typeof CQ_CONTENT_PATH != "undefined") {
                    h = CQ_CONTENT_PATH
                }
                var o = CQ.shared.HTTP.getParameter(h, "wcmmode");
                if (o) {
                    n += (n.indexOf("?") > 0 ? "&" : "?") + "wcmmode=" + o
                }
                CQ.shared.HTTP.get(n, function (s, r, p) {
                    if (r) {
                        var q = p.body;
                        if (q) {
                            q = q.replace(new RegExp("\\n", "ig"), "");
                            q = q.replace(new RegExp("\\r", "ig"), "");
                            k(a, q);
                            delete CQ_Analytics.Utils.teasersLoading[a];
                            b()
                        }
                    } else {
                        k(a, "")
                    }
                })
            };
            var c = $CQ("#" + d).children().length;
            if (c > 0) {
                var m = 0;
                $CQ("#" + d).children().fadeOut(function () {
                    var h = $CQ(this);
                    window.setTimeout(function () {
                        h.remove();
                        m++;
                        if (m >= c) {
                            b()
                        }
                    }, 50)
                })
            } else {
                b()
            }
        }, clearElement: function (a) {
            if (a) {
                $CQ("#" + a).html("")
            }
        }, indexOf: function (d, c) {
            for (var b = 0, a = d.length;
                 b < a;
                 b++) {
                if (d[b] == c) {
                    return b
                }
            }
            return -1
        }, load: function (a, c, b) {
            return CQ.shared.HTTP.get(a, c, b)
        }, post: function (a, d, c, b) {
            return CQ.shared.HTTP.post(a, d, c, b)
        }, getPagePath: function () {
            return CQ.shared.HTTP.getPath()
        }, getPath: function (a) {
            return CQ.shared.HTTP.getPath(a)
        }, addParameter: function (b, a, c) {
            return CQ.shared.HTTP.addParameter(b, a, c)
        }, removeParameters: function (a) {
            return CQ.shared.HTTP.removeParameters(a)
        }, removeAnchor: function (a) {
            return CQ.shared.HTTP.removeAnchor(a)
        }, getSchemeAndAuthority: function (a) {
            return CQ.shared.HTTP.getSchemeAndAuthority(a)
        }, internalize: function (a, b) {
            return CQ.shared.HTTP.internalize(b)
        }, externalize: function (a, b) {
            return CQ.shared.HTTP.externalize(a, b)
        }, encodePathOfURI: function (a) {
            return CQ.shared.HTTP.encodePathOfURI(a)
        }, encodePath: function (a) {
            return CQ.shared.HTTP.encodePath(a)
        }, getContextPath: function () {
            return CQ.shared.HTTP.getContextPath()
        }, detectContextPath: function () {
            return CQ.shared.HTTP.detectContextPath()
        }, urlEncode: function (j) {
            if (!j) {
                return ""
            }
            if (typeof j == "string") {
                return j
            }
            var c = [];
            for (var g in j) {
                var f = j[g], b = encodeURIComponent(g);
                var h = typeof f;
                if (h == "undefined") {
                    c.push(b, "=&")
                } else {
                    if (h != "function" && h != "object") {
                        c.push(b, "=", encodeURIComponent(f), "&")
                    } else {
                        if (typeof f == "array") {
                            if (f.length) {
                                for (var d = 0, a = f.length;
                                     d < a;
                                     d++) {
                                    c.push(b, "=", encodeURIComponent(f[d] === undefined ? "" : f[d]), "&")
                                }
                            } else {
                                c.push(b, "=&")
                            }
                        }
                    }
                }
            }
            c.pop();
            return c.join("")
        }, getUID: function () {
            var a = Math.floor(Math.random() * (Math.pow(2, 42) - 1));
            return this.getTimestamp().toString(16) + a.toString(16)
        }, getTimestamp: function () {
            var a = new Date();
            return a.getTime()
        }, insert: function (d, c, b) {
            if (!d || isNaN(c) || !b) {
                return d
            }
            var a = "";
            var g = 0;
            var f = c;
            while (f < d.length) {
                a += d.substring(g, f) + b;
                g += c;
                f += c
            }
            if (g < d.length) {
                a += d.substring(g)
            }
            return a
        }, addListener: function () {
            if (window.addEventListener) {
                return function (d, b, c, a) {
                    d.addEventListener(b, c, (a))
                }
            } else {
                if (window.attachEvent) {
                    return function (d, b, c, a) {
                        d.attachEvent("on" + b, c)
                    }
                } else {
                    return function () {
                    }
                }
            }
        }, removeListener: function () {
            if (window.removeEventListener) {
                return function (d, b, c, a) {
                    d.removeEventListener(b, c, (a))
                }
            } else {
                if (window.detachEvent) {
                    return function (c, a, b) {
                        c.detachEvent("on" + a, b)
                    }
                } else {
                    return function () {
                    }
                }
            }
        }
    }
};
CQ_Analytics.ClickstreamcloudRenderingUtils = new function () {
    return {
        createLink: function (g, d, b, a) {
            var c = document.createElement("a");
            c.href = a;
            c.onclick = d;
            c.innerHTML = g;
            if (b) {
                for (var f in b) {
                    if (b.hasOwnProperty(f)) {
                        c[f] = b[f]
                    }
                }
            }
            return c
        }, createStaticLink: function (d, a, c) {
            var b = document.createElement("a");
            b.href = a;
            b.innerHTML = d;
            b.title = c;
            b.alt = c;
            return b
        }, createNameValue: function (b, d, a, f) {
            var c = document.createElement("span");
            c.className = a || "ccl-data";
            c.innerHTML = b + " = " + d;
            c.title = f;
            c.alt = f;
            return c
        }, createText: function (d, a, c) {
            var b = document.createElement("span");
            b.className = a || "ccl-data";
            if (d && d.indexOf && ((d.indexOf("/home") != -1 && d.indexOf("/image") != -1) || (d.indexOf("/") != -1 && d.indexOf(".png") != -1))) {
                b.innerHTML = '<img src="' + d + '.prof.thumbnail.png" border="0">'
            } else {
                if (d && d.indexOf && d.indexOf("www.gravatar.com") != -1) {
                    b.innerHTML = '<img src="' + d + '">'
                } else {
                    b.innerHTML = d
                }
            }
            b.title = c;
            b.alt = c;
            return b
        }, createEditablePropertySpan: function (b, d) {
            var a = "var editSpan = this.nextSibling; this.style.display = 'none'; editSpan.style.display = 'block';";
            var f = "var editSpan = this.parentNode; var readSpan = this.parentNode.previousSibling;var newValue = this.value;editSpan.style.display = 'none'; readSpan.innerHTML = '" + b + " = '+value; readSpan.style.display = 'block';";
            var c = document.createElement("span");
            c.innerHTML = '<span class="ccl-data" onclick="' + a + '">' + b + " = " + d + "</span>";
            c.innerHTML += '<span class="ccl-data" style="display: none;">' + b + ' = <input class="ccl-input" type="text" value="' + d + '" onblur="' + f + '"></span>';
            c.className = "ccl-data";
            return c
        }
    }
};
CQ_Analytics.ClientContextUtils = new function () {
    return {
        renderStoreProperty: function (g, c, b, d, f, a) {
            if (CQ_Analytics && CQ_Analytics.CCM) {
                CQ_Analytics.CCM.onReady(function () {
                    var h = function () {
                        var j = CQ_Analytics.StoreRegistry.getStore(c);
                        if (j) {
                            var k = function () {
                                var n = j.getProperty(b) || a;
                                var m = $CQ("#" + g);
                                if (m.attr("contenteditable") && m.attr("contenteditable") != "inherit") {
                                    return
                                }
                                if (typeof(n) == "string" && ((n.indexOf("/") == 0 && (n.toLowerCase().indexOf(".png") != -1 || n.toLowerCase().indexOf(".jpg") != -1 || n.toLowerCase().indexOf(".gif") != -1) || n.toLowerCase().indexOf("http") == 0))) {
                                    if (!n || n == "") {
                                        m.children().remove();
                                        if (CQ_Analytics.isUIAvailable) {
                                            m.html(CQ.I18n.getMessage("No", null, "Ex: No address, No keywords") + " " + b)
                                        } else {
                                            m.html("No " + b)
                                        }
                                    } else {
                                        var l = "";
                                        if (m.parents(".cq-cc-thumbnail").length == 0 || n.toLowerCase().indexOf("http") == 0 || n.indexOf("/libs/wcm/mobile") == 0) {
                                            l = n.replace(new RegExp("&amp;", "g"), "&")
                                        } else {
                                            l = "/etc/clientcontext/shared/thumbnail/content.png";
                                            l = CQ.shared.HTTP.addParameter(l, "path", CQ_Analytics.Variables.replaceVariables(n))
                                        }
                                        l = CQ_Analytics.Variables.replaceVariables(l);
                                        if (m.find("div").css("background-image") != "url(" + l + ")") {
                                            if (j.fireEvent("beforepropertyrender", j, g) !== false) {
                                                m.html("");
                                                m.children().remove();
                                                $CQ("<div>").addClass("cq-cc-thumbnail-img").css("background-image", "url(" + CQ.shared.HTTP.externalize(l) + ")").appendTo(m);
                                                j.fireEvent("propertyrender", j, g)
                                            }
                                        }
                                    }
                                } else {
                                    n = CQ_Analytics.Variables.replaceVariables(n);
                                    if (CQ_Analytics.isUIAvailable) {
                                        n = (!n || n == "") ? CQ.I18n.getMessage("No", null, "Ex: No address, No keywords") + " " + b : n = d + n + f
                                    } else {
                                        n = (!n || n == "") ? "No " + b : n = d + n + f
                                    }
                                    if (m.html() != n) {
                                        if (j.fireEvent("beforepropertyrender", j, g) !== false) {
                                            m.html(n);
                                            j.fireEvent("propertyrender", j, g)
                                        }
                                    }
                                }
                            };
                            if (j.fireEvent("beforeinitialpropertyrender", j, g) !== false) {
                                k();
                                if (j.addListener) {
                                    j.addListener("update", function () {
                                        k()
                                    })
                                }
                                j.fireEvent("initialpropertyrender", j, g)
                            }
                        }
                    };
                    CQ_Analytics.ClientContextUtils.onStoreRegistered(c, h)
                })
            }
        }, renderStore: function (b, a) {
            if (CQ_Analytics && CQ_Analytics.CCM && b && a) {
                CQ_Analytics.CCM.onReady(function () {
                    var c = function () {
                        var d = CQ_Analytics.StoreRegistry.getStore(a);
                        if (d) {
                            d.divId = b;
                            var f = function () {
                                if (d.fireEvent("beforerender", d, d.divId) !== false) {
                                    d.renderer(d, d.divId);
                                    d.fireEvent("render", d, d.divId)
                                }
                            };
                            if (d.fireEvent("beforeinitialrender", d, b) !== false) {
                                f();
                                if (d.addListener) {
                                    d.addListener("update", function () {
                                        f()
                                    })
                                }
                                d.fireEvent("initialrender", d, b)
                            }
                        }
                    };
                    CQ_Analytics.ClientContextUtils.onStoreRegistered(a, c)
                })
            }
        }, storesOptionsProvider: function () {
            var c = [];
            var a = CQ_Analytics.StoreRegistry.getStores();
            for (var b in a) {
                c.push({value: b})
            }
            return c
        }, storePropertiesOptionsProvider: function (c, f) {
            var b = [];
            var a = CQ_Analytics.StoreRegistry.getStore(c);
            if (a) {
                var h = a.getPropertyNames();
                for (var d = 0;
                     d < h.length;
                     d++) {
                    var g = h[d];
                    if (!CQ.shared.XSS.KEY_REGEXP.test(g)) {
                        var j = {value: g};
                        if (f) {
                            j.text = g + " - " + a.getProperty(g)
                        }
                        b.push(j)
                    }
                }
            }
            return b
        }, onStoreRegistered: function (b, c) {
            if (c) {
                var a = CQ_Analytics.StoreRegistry.getStore(b);
                if (a) {
                    c.call(a, a)
                } else {
                    CQ_Analytics.CCM.addListener("storeregister", function (f, d) {
                        if (d.getName() == b) {
                            c.call(d, d)
                        }
                    })
                }
            }
        }, onStoreInitialized: function (c, f, b) {
            if (b === true) {
                b = CQ_Analytics.ClientContextUtils.DEFAULT_INIT_DELAY
            }
            var d = function () {
                var g = CQ_Analytics.StoreRegistry.getStore(c);
                if (g.DELAYED_INIT_TIMEOUT) {
                    window.clearTimeout(g.DELAYED_INIT_TIMEOUT);
                    g.DELAYED_INIT_TIMEOUT = null
                }
                if (b > 0) {
                    g.DELAYED_INIT_TIMEOUT = window.setTimeout(function () {
                        g.DELAYED_INIT_TIMEOUT = null;
                        f.call(g, "initialize", g)
                    }, b)
                } else {
                    f.call(g, "initialize", g)
                }
            };
            var a = CQ_Analytics.StoreRegistry.getStore(c);
            if (a) {
                if (a.isInitialized()) {
                    d.call(a);
                    a.addListener("initialize", function (h, g) {
                        d.call(g)
                    })
                } else {
                    a.addListener("initialize", function (h, g) {
                        d.call(g)
                    })
                }
            } else {
                CQ_Analytics.CCM.addListener("storeregister", function (h, g) {
                    if (g.getName() == c) {
                        CQ_Analytics.ClientContextUtils.onStoreInitialized(c, f, b)
                    }
                })
            }
        }, init: function (d, c) {
            CQ_Analytics.ClientContextMgr.PATH = d;
            CQ_Analytics.ClientContextMgr.loadConfig(null, true);
            var a = CQ.shared.HTTP.externalize(d + "/content/jcr:content/stores.init.js");
            a = CQ.shared.HTTP.addParameter(a, "path", c);
            a = CQ.shared.HTTP.noCaching(a);
            var b = CQ.shared.HTTP.get(a)
        }, initUI: function (c, a, b) {
            CQ_Analytics.ClientContextUI.create(c, a, b)
        }
    }
};
CQ_Analytics.ClientContextUtils.DEFAULT_INIT_DELAY = 200;
CQ_Analytics.Variables = new function () {
    return {
        containsVariable: function (a) {
            return CQ_Analytics.Variables.getVariables(a).length > 0
        }, getVariables: function (b) {
            if (!b || typeof(b) != "string") {
                return []
            }
            var a = b.match(new RegExp("\\$\\{([\\w/]*)\\}", "ig"));
            return a ? a : []
        }, replaceVariables: function (f) {
            if (!f) {
                return f
            }
            var g = "";
            var d = f;
            var h = CQ_Analytics.Variables.getVariables(f);
            while (h.length > 0 && g.indexOf(h.join()) == -1) {
                for (var c = 0;
                     c < h.length;
                     c++) {
                    var b = CQ_Analytics.Variables.getPropertyPath(h[c]);
                    var a = CQ_Analytics.ClientContext.get(b) || "";
                    d = CQ_Analytics.Variables.replace(d, b, a)
                }
                g += h.join();
                h = CQ_Analytics.Variables.getVariables(d)
            }
            return d
        }, getPropertyPath: function (a) {
            if (!a || a.length < 2) {
                return null
            }
            return a.substring(2, a.length - 1)
        }, getPropertyName: function (a) {
            var c = CQ_Analytics.Variables.getPropertyPath(a);
            if (c) {
                var b = c.split("/");
                if (b.length == 3) {
                    return b[2]
                }
            }
            return null
        }, getStoreName: function (a) {
            var c = CQ_Analytics.Variables.getPropertyPath(a);
            if (c) {
                var b = c.split("/");
                if (b.length > 1) {
                    return b[1]
                }
            }
            return null
        }, replace: function (a, b, c) {
            return a.replace(new RegExp("\\$\\{" + b + "\\}", "ig"), c)
        }
    }
};
CQ_Analytics.SessionPersistence = CQ.shared.ClientSidePersistence;
CQ_Analytics.Cookie = CQ.shared.ClientSidePersistence.CookieHelper;
CQ_Analytics.Observable = function () {
    this.fireEvent = function (d) {
        if (d && this.listeners && !this.suppressEvents) {
            d = d.toLowerCase();
            var b = Array.prototype.slice.call(arguments, 0);
            var f = this.listeners.slice(0);
            for (var c = 0;
                 c < f.length;
                 c++) {
                var a = f[c];
                if (d == a.event) {
                    if (a.fireFn.apply(a.scope || this || window, b) === false) {
                        return false
                    }
                }
            }
        }
        return true
    }
};
CQ_Analytics.Observable.prototype.addListener = function (c, a, b) {
    this.listeners = this.listeners || new Array();
    if (c && a) {
        this.listeners.push({event: c.toLowerCase(), fireFn: a, scope: b})
    }
};
CQ_Analytics.Observable.prototype.removeListener = function (c, a) {
    this.listeners = this.listeners || new Array();
    if (c && a) {
        for (var b = 0;
             b < this.listeners.length;
             b++) {
            if (this.listeners[b].event == c && this.listeners[b].fireFn == a) {
                this.listeners.splice(b, 1)
            }
        }
    }
};
CQ_Analytics.Observable.prototype.setSuppressEvents = function (a) {
    this.suppressEvents = a
};
CQ_Analytics.Observable.prototype.listeners = null;
CQ_Analytics.Observable.prototype.suppressEvents = false;
if (!CQ_Analytics.StoreRegistry) {
    CQ_Analytics.StoreRegistry = new function () {
        var a = {};
        return {
            register: function (b) {
                if (b.STORENAME) {
                    a[b.STORENAME] = b
                }
            }, getStores: function () {
                return a
            }, getStore: function (b) {
                return a[b]
            }
        }
    }()
}
CQ_Analytics.SessionStore = function () {
};
CQ_Analytics.SessionStore.prototype = new CQ_Analytics.Observable();
CQ_Analytics.SessionStore.prototype.setProperty = function (a, b) {
    if (this.data == null) {
        this.init()
    }
    this.data[a] = b;
    this.fireEvent("update", a)
};
CQ_Analytics.SessionStore.prototype.setProperties = function (b) {
    if (this.data == null) {
        this.init()
    }
    var d = [];
    for (var a in b) {
        if (b.hasOwnProperty(a)) {
            d.push(a);
            var c = b[a];
            this.data[a] = c
        }
    }
    if (d.length > 0) {
        this.fireEvent("update", d)
    }
};
CQ_Analytics.SessionStore.prototype.initialized = false;
CQ_Analytics.SessionStore.prototype.init = function () {
    this.initialized = true;
    this.fireEvent("initialize", this)
};
CQ_Analytics.SessionStore.prototype.getLabel = function (a) {
    return a
};
CQ_Analytics.SessionStore.prototype.getLink = function (a) {
    return a
};
CQ_Analytics.SessionStore.prototype.removeProperty = function (a) {
    if (this.data == null) {
        this.init()
    }
    if (this.data[a]) {
        delete this.data[a]
    }
    this.fireEvent("update", a)
};
CQ_Analytics.SessionStore.prototype.getPropertyNames = function (a) {
    if (this.data == null) {
        this.init()
    }
    a = a ? a : [];
    var b = new Array();
    for (var c in this.data) {
        if (CQ_Analytics.Utils.indexOf(a, c) == -1) {
            b.push(c)
        }
    }
    return b
};
CQ_Analytics.SessionStore.prototype.getSessionStore = function () {
    return this
};
CQ_Analytics.SessionStore.prototype.clear = function () {
    this.data = null
};
CQ_Analytics.SessionStore.prototype.getData = function (b) {
    if (this.data == null) {
        this.init()
    }
    if (b) {
        var a = {};
        for (var c in this.data) {
            if (CQ_Analytics.Utils.indexOf(b, c) == -1) {
                a[c] = this.data[c]
            }
        }
        return a
    } else {
        return this.data
    }
};
CQ_Analytics.SessionStore.prototype.reset = function () {
    if (this.data != null) {
        this.data = null;
        this.fireEvent("update")
    }
};
CQ_Analytics.SessionStore.prototype.getProperty = function (b, a) {
    if (this.data == null) {
        this.init()
    }
    var d = this.data[b];
    if (!a) {
        var c = CQ.shared.XSS.getXSSValue(d);
        return c
    }
    return d
};
CQ_Analytics.SessionStore.prototype.getName = function () {
    return this.STORENAME
};
CQ_Analytics.SessionStore.prototype.addInitProperty = function (a, b) {
    if (!this.initProperty) {
        this.initProperty = {}
    }
    this.initProperty[a] = b
};
CQ_Analytics.SessionStore.prototype.getInitProperty = function (a) {
    return this.initProperty ? this.initProperty[a] : null
};
CQ_Analytics.SessionStore.prototype.loadInitProperties = function (c, a) {
    if (c) {
        for (var b in c) {
            this.addInitProperty(b, c[b]);
            if (a && this.data && this.data[b] === undefined) {
                this.setProperty(b, c[b])
            }
        }
    }
};
CQ_Analytics.SessionStore.prototype.isInitialized = function () {
    return this.initialized
};
CQ_Analytics.PersistedSessionStore = function () {
};
CQ_Analytics.PersistedSessionStore.prototype = new CQ_Analytics.SessionStore();
CQ_Analytics.PersistedSessionStore.prototype.STOREKEY = "key";
CQ_Analytics.PersistedSessionStore.prototype.setNonPersisted = function (a) {
    if (!this.nonPersisted) {
        this.nonPersisted = {}
    }
    this.nonPersisted[a] = true
};
CQ_Analytics.PersistedSessionStore.EXCLUDED_PROPERTIES_REGEX = "^generated*";
CQ_Analytics.PersistedSessionStore.prototype.isPersisted = function (a) {
    if (!this.nonPersisted) {
        this.nonPersisted = {}
    }
    return this.nonPersisted[a] !== true && !new RegExp(CQ_Analytics.PersistedSessionStore.EXCLUDED_PROPERTIES_REGEX, "ig").test(a) && !$CQ.isFunction(this.data[a]) && (typeof this.data[a]) != "object"
};
CQ_Analytics.PersistedSessionStore.prototype.getStoreKey = function () {
    return this.STOREKEY
};
CQ_Analytics.PersistedSessionStore.prototype.persist = function () {
    if (this.fireEvent("beforepersist") !== false) {
        var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        a.set(this.getStoreKey(), this.toString());
        this.fireEvent("persist")
    }
};
CQ_Analytics.PersistedSessionStore.prototype.setProperty = function (a, b) {
    if (this.data == null) {
        this.init()
    }
    this.data[a] = b;
    if (this.isPersisted(a)) {
        this.persist()
    }
    this.fireEvent("update", a)
};
CQ_Analytics.PersistedSessionStore.prototype.setProperties = function (b) {
    if (this.data == null) {
        this.init()
    }
    var d = [];
    var f = false;
    for (var a in b) {
        if (b.hasOwnProperty(a)) {
            d.push(a);
            var c = b[a];
            this.data[a] = c;
            if (this.isPersisted(a)) {
                f = true
            }
        }
    }
    if (f) {
        this.persist()
    }
    if (d.length > 0) {
        this.fireEvent("update", d)
    }
};
CQ_Analytics.PersistedSessionStore.prototype.toString = function () {
    var b = null;
    if (this.data) {
        var a = function (f) {
            if (!f || typeof(f) != "string") {
                return f
            }
            var d = f;
            d = d.replace(new RegExp(",", "g"), "&#44;");
            d = d.replace(new RegExp("=", "g"), "&#61;");
            d = d.replace(new RegExp("\\|", "g"), "&#124;");
            return d
        };
        for (var c in this.data) {
            if (this.isPersisted(c) && this.data.hasOwnProperty(c)) {
                b = (b === null ? "" : b + ",");
                b += (c + "=" + a(this.data[c]))
            }
        }
    }
    return b
};
CQ_Analytics.PersistedSessionStore.prototype.parse = function (f) {
    var d = function (j) {
        if (!j || typeof(j) != "string") {
            return j
        }
        var h = j;
        h = h.replace(new RegExp("&#44;", "g"), ",");
        h = h.replace(new RegExp("&#61;", "g"), "=");
        h = h.replace(new RegExp("&#124;", "g"), "|");
        return h
    };
    var c = {};
    var g = f.split(",");
    for (var a in g) {
        if (g.hasOwnProperty(a)) {
            var b = g[a].split("=");
            if (b.length == 2) {
                c[b[0]] = d(b[1])
            }
        }
    }
    return c
};
CQ_Analytics.PersistedSessionStore.prototype.reset = function (a) {
    if (this.data != null) {
        this.data = {};
        this.persist();
        this.data = null;
        if (!a) {
            this.fireEvent("update")
        }
    }
};
CQ_Analytics.PersistedSessionStore.prototype.removeProperty = function (a) {
    if (this.data == null) {
        this.init()
    }
    if (this.data[a]) {
        delete this.data[a];
        if (this.isPersisted(a)) {
            this.persist()
        }
    }
    this.fireEvent("update", a)
};
CQ_Analytics.PersistedSessionStore.prototype.clear = function () {
    var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
    a.remove(this.getStoreKey());
    this.data = null
};
if (!CQ_Analytics.ClientContextMgr) {
    CQ_Analytics.ClientContextMgr = function () {
        this.clientcontext = null;
        this.clientcontextToServer = null;
        this.stores = {};
        this.data = null;
        this.config = null;
        this.isConfigLoaded = false;
        this.areStoresLoaded = false
    };
    CQ_Analytics.ClientContextMgr.prototype = new CQ_Analytics.PersistedSessionStore();
    CQ_Analytics.ClientContextMgr.prototype.STOREKEY = "CLIENTCONTEXT";
    CQ_Analytics.ClientContextMgr.prototype.STORENAME = "clientcontext";
    CQ_Analytics.ClientContextMgr.prototype.INITIALIZATION_EVENT_TIMER = 1000;
    CQ_Analytics.ClientContextMgr.prototype.CONFIG_PATH = CQ_Analytics.Utils.externalize("/etc/clientcontext/legacy/config.json", true);
    CQ_Analytics.ClientContextMgr.prototype.init = function () {
        if (!this.initialized) {
            this.clientcontext = {};
            this.clientcontextToServer = {}
        }
        var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        var b = a.get(this.getStoreKey());
        if (b) {
            this.data = this.parse(b)
        } else {
            this.data = {}
        }
        this.initialized = true;
        this.fireEvent("initialize", this)
    };
    CQ_Analytics.ClientContextMgr.prototype.getSessionId = function () {
        if (!this.data.sessionId) {
            this.setSessionId(CQ_Analytics.Utils.getUID())
        }
        return this.data.sessionId
    };
    CQ_Analytics.ClientContextMgr.prototype.setSessionId = function (a) {
        if (a) {
            this.setProperty("sessionId", a)
        }
    };
    CQ_Analytics.ClientContextMgr.prototype.getVisitorId = function () {
        return this.data.visitorId
    };
    CQ_Analytics.ClientContextMgr.prototype.setVisitorId = function (a) {
        this.setProperty("visitorId", a)
    };
    CQ_Analytics.ClientContextMgr.prototype.getId = function () {
        var a = this.getVisitorId();
        if (!a) {
            return this.getSessionId()
        }
        return a
    };
    CQ_Analytics.ClientContextMgr.prototype.isAnonymous = function () {
        var a = this.getVisitorId();
        return (!a)
    };
    CQ_Analytics.ClientContextMgr.prototype.isMode = function (a) {
        return CQ_Analytics.ClientContextMgr.ServerStorage.isMode(a)
    };
    CQ_Analytics.ClientContextMgr.prototype.get = function (a) {
        if (this.clientcontext == null) {
            this.init()
        }
        if (a) {
            return this.clientcontextToServer
        }
        return this.clientcontext
    };
    CQ_Analytics.ClientContextMgr.prototype.register = function (c) {
        if (this.clientcontext == null) {
            this.init()
        }
        var a = this;
        this.clientcontext[c.getName()] = c.getData();
        this.stores[c.getName()] = c;
        CQ_Analytics.StoreRegistry.register(c);
        var b = this.getStoreConfig(c.getName());
        if (b.stats !== false && b.stats != "false") {
            this.clientcontextToServer[c.getName()] = c.getData(b.excludedFromStats)
        }
        if (this.initTimer) {
            window.clearTimeout(this.initTimer);
            this.initTimer = null
        }
        this.initTimer = window.setTimeout(function () {
            a.fireEvent("storesinitialize");
            a.areStoresInitialized = true
        }, this.INITIALIZATION_EVENT_TIMER);
        c.addListener("update", function () {
            a.update(c)
        });
        CQ_Analytics.ClientContextMgr.ServerStorage.handleStoreRegistration(c);
        this.addListener("clear", function () {
            c.clear()
        });
        this.fireEvent("storeregister", c);
        this.fireEvent("storeupdate", c)
    };
    CQ_Analytics.ClientContextMgr.prototype.update = function (b) {
        if (this.clientcontext == null) {
            this.init()
        }
        this.clientcontext[b.getName()] = b.getData();
        var a = this.getStoreConfig(b.getName());
        if (a.stats !== false && a.stats != "false") {
            this.clientcontextToServer[b.getName()] = b.getData(a.excludedFromStats)
        }
        this.fireEvent("storeupdate", b)
    };
    CQ_Analytics.ClientContextMgr.prototype.startPosting = function () {
        return CQ_Analytics.ClientContextMgr.ServerStorage.startPosting()
    };
    CQ_Analytics.ClientContextMgr.prototype.stopPosting = function () {
        return CQ_Analytics.ClientContextMgr.ServerStorage.stopPosting()
    };
    CQ_Analytics.ClientContextMgr.prototype.post = function () {
        return CQ_Analytics.ClientContextMgr.ServerStorage.post()
    };
    CQ_Analytics.ClientContextMgr.prototype.getCCMToJCR = function () {
        return CQ_Analytics.ClientContextMgr.ServerStorage.getCCMToJCR()
    };
    CQ_Analytics.ClientContextMgr.prototype.getName = function () {
        return this.STORENAME
    };
    CQ_Analytics.ClientContextMgr.prototype.clear = function () {
        this.clientcontext = null;
        this.clientcontextToServer = null;
        this.fireEvent("clear")
    };
    CQ_Analytics.ClientContextMgr.prototype.getRegisteredStore = function (a) {
        return this.stores && this.stores[a] ? this.stores[a] : null
    };
    CQ_Analytics.ClientContextMgr.prototype.loadConfig = function (c, autoConfig) {
        var setConfig = function (ccm, config) {
            ccm.config = config;
            ccm.isConfigLoaded = true;
            ccm.fireEvent("configloaded");
            ccm.fireEvent("storesloaded");
            ccm.areStoresLoaded = true
        };
        if (c) {
            setConfig(this, c)
        } else {
            if (!autoConfig) {
                var params = {};
                params.path = CQ_Analytics.Utils.getPagePath();
                params.cq_ck = new Date().valueOf();
                var url = this.CONFIG_PATH;
                url += "?" + CQ_Analytics.Utils.urlEncode(params);
                CQ_Analytics.Utils.load(url, function (data, status, response) {
                    var config = {};
                    try {
                        config = eval("config = " + response.responseText)
                    } catch (error) {
                    }
                    setConfig(this, config)
                }, this)
            } else {
                setConfig(this, {})
            }
        }
    };
    CQ_Analytics.ClientContextMgr.prototype.getConfig = function () {
        return this.config
    };
    CQ_Analytics.ClientContextMgr.prototype.getStoreConfig = function (a) {
        if (this.config && this.config.configs && this.config.configs[a] && this.config.configs[a]["store"]) {
            return this.config.configs[a]["store"]
        }
        return {}
    };
    CQ_Analytics.ClientContextMgr.prototype.getEditConfig = function (a) {
        if (this.config && this.config.configs && this.config.configs[a] && this.config.configs[a]["edit"]) {
            return this.config.configs[a]["edit"]
        }
        return {}
    };
    CQ_Analytics.ClientContextMgr.prototype.getUIConfig = function (a) {
        if (this.config && this.config.configs && this.config.configs[a] && this.config.configs[a]["ui"]) {
            return this.config.configs[a]["ui"]
        }
        return {}
    };
    CQ_Analytics.ClientContextMgr.prototype.getInitialData = function (a) {
        if (this.config && this.config.data && this.config.data[a]) {
            return this.config.data[a]
        }
        return {}
    };
    CQ_Analytics.ClientContextMgr.prototype.getStores = function () {
        return this.stores
    };
    CQ_Analytics.ClientContextMgr.prototype.onReady = function (b, a) {
        if (b) {
            if (this.areStoresLoaded) {
                b.call(a)
            } else {
                this.addListener("storesloaded", b, a)
            }
        }
    };
    CQ_Analytics.ClientContextMgr = CQ_Analytics.CCM = new CQ_Analytics.ClientContextMgr();
    CQ_Analytics.ClickstreamcloudMgr = CQ_Analytics.CCM;
    CQ_Analytics.ContextCloudMgr = CQ_Analytics.CCM;
    CQ_Analytics.ClientContextMgr.PATH = null;
    CQ_Analytics.ClientContextMgr.getClientContextURL = function (a) {
        return CQ_Analytics.ClientContextMgr.PATH + a
    };
    window.setTimeout(function () {
        CQ_Analytics.CCM.init()
    }, 1);
    CQ_Analytics.Utils.addListener(window, "unload", function () {
        try {
            for (var b in CQ_Analytics.ClientContextMgr) {
                delete CQ_Analytics.ClientContextMgr[b]
            }
            CQ_Analytics.ClientContextMgr = null
        } catch (a) {
        }
        CQ_Analytics.CCM = null
    })
}
if (CQ_Analytics.ClientContextMgr && !CQ_Analytics.ClientContextMgr.ServerStorage) {
    CQ_Analytics.ClientContextMgr.ServerStorage = function () {
        this.posting = false;
        this.initialized = false
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_MODE_PAGELOAD = 1;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_MODE_TIMER = 2;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_MODE_DATAUPDATE = 4;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_TIMER = 600;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_PROCESS_TIMER = 60;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_MODE = 6;
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.POST_PATH = "/var/statistics/";
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.init = function () {
        if (this.isMode(CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE_TIMER)) {
            var a = this;
            var b = function () {
                a.timer = window.setInterval(function () {
                    try {
                        var d = parseInt(a.data.lastPost);
                        var g = false;
                        if (isNaN(d)) {
                            g = true
                        } else {
                            var f = new Date().getTime();
                            if (f > d + CQ_Analytics.ClientContextMgr.ServerStorage.POST_TIMER * 1000) {
                                g = true
                            }
                        }
                    } catch (c) {
                    }
                    if (g) {
                        a.post()
                    }
                }, CQ_Analytics.ClientContextMgr.ServerStorage.POST_PROCESS_TIMER * 1000)
            };
            b.call(this)
        }
        this.initialized = true
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.isMode = function (a) {
        return (CQ_Analytics.CCM.POST_MODE & a) > 0
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.handleStoreRegistration = function (a) {
        if (!this.initialized) {
            this.init()
        }
        if (this.isMode(CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE_DATAUPDATE)) {
            a.addListener("persist", function () {
                CQ_Analytics.ClientContextMgr.ServerStorage.post(a)
            })
        }
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.startPosting = function () {
        this.posting = true
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.stopPosting = function () {
        this.posting = false
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.post = function (d, g) {
        if (this.posting || g) {
            try {
                var h = this.getCCMToJCR(d);
                var f = CQ_Analytics.Utils.getTimestamp();
                h["./jcr:primaryType"] = "nt:unstructured";
                h["./sessionId"] = CQ_Analytics.CCM.getSessionId();
                var c = this.POST_PATH + "clientcontext/";
                if (CQ_Analytics.CCM.isAnonymous()) {
                    var a = CQ_Analytics.Utils.insert(CQ_Analytics.CCM.getId(), 2, "/");
                    c += "anonymous/" + a + "/" + f
                } else {
                    c += "users/" + CQ_Analytics.CCM.getId() + "/" + f
                }
                CQ_Analytics.Utils.post(c, null, h);
                this.lastPost = f
            } catch (b) {
            }
        }
    };
    CQ_Analytics.ClientContextMgr.ServerStorage.prototype.getCCMToJCR = function (h) {
        var c = CQ_Analytics.CCM.get(true);
        var f = {};
        for (var l in c) {
            if (!h || l == h) {
                var a = c[l], b = encodeURIComponent(l);
                var g = typeof a;
                if (g == "object") {
                    for (var d in a) {
                        var j = a[d];
                        d = d.replace(":", "/");
                        f["./" + l + "/./" + d] = j
                    }
                } else {
                    f["./" + l] = a
                }
            }
        }
        return f
    };
    CQ_Analytics.ClientContextMgr.ServerStorage = new CQ_Analytics.ClientContextMgr.ServerStorage();
    CQ_Analytics.ClickstreamcloudMgr.POST_MODE_PAGELOAD = CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE_PAGELOAD;
    CQ_Analytics.ClickstreamcloudMgr.POST_MODE_TIMER = CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE_TIMER;
    CQ_Analytics.ClickstreamcloudMgr.POST_MODE_DATAUPDATE = CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE_DATAUPDATE;
    CQ_Analytics.ClickstreamcloudMgr.POST_TIMER = CQ_Analytics.ClientContextMgr.ServerStorage.POST_PROCESS_TIMER;
    CQ_Analytics.ClickstreamcloudMgr.POST_PROCESS_TIMER = CQ_Analytics.ClientContextMgr.ServerStorage.POST_PROCESS_TIMER;
    CQ_Analytics.ClickstreamcloudMgr.POST_MODE = CQ_Analytics.ClientContextMgr.ServerStorage.POST_MODE;
    CQ_Analytics.ClickstreamcloudMgr.POST_PATH = CQ_Analytics.ClientContextMgr.ServerStorage.POST_PATH
}
CQ_Analytics.Percentile = {};
CQ_Analytics.Percentile.matchesPercentiles = function (b) {
    var d = ClientContext.get("/surferinfo/percentile");
    if (!d) {
        d = Math.round(Math.random() * 100);
        ClientContext.set("/surferinfo/percentile", d)
    }
    for (var c = 0;
         c < b.length;
         c++) {
        var a = b[c];
        if ((a.start <= d) && (d < a.end)) {
            return true
        }
    }
    return false
};
if (!CQ_Analytics.SegmentMgr) {
    CQ_Analytics.SegmentMgr = function () {
        this.SEGMENTATION_ROOT = "/etc/segmentation";
        this.SEGMENT_SELECTOR = ".segment.js";
        this.SEGMENTATION_SCRIPT_LOADER = "cq-segmentation-loader";
        this.segments = {};
        this.boosts = {};
        var a = this;
        this.fireUpdate = function () {
            a.fireEvent("update")
        };
        this.init()
    };
    CQ_Analytics.SegmentMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.SegmentMgr.prototype.STORENAME = "segments";
    CQ_Analytics.SegmentMgr.prototype.register = function (a, c, b) {
        this.segments[a] = c;
        if (this.rulesCache && this.rulesCache[a]) {
            this.rulesCache[a] = false
        }
        this.boosts[a] = !isNaN(b) ? parseInt(b) : 0;
        this.fireUpdate()
    };
    CQ_Analytics.SegmentMgr.prototype.resolveArray = function (f, h, b) {
        h = h || CQ_Analytics.ClientContextMgr.get();
        if (!(f instanceof Array)) {
            return this.resolve(f, h)
        }
        b = (b == "AND" ? "AND" : "OR");
        var a = (b == "AND");
        for (var d = 0;
             d < f.length;
             d++) {
            var g = f[d];
            var c = this.resolve(g, h);
            if (b == "AND") {
                if (c !== true) {
                    return c
                }
            } else {
                if (c === true) {
                    return true
                }
            }
        }
        return a
    };
    CQ_Analytics.SegmentMgr.prototype.resolve = function (segmentPath, clientcontext) {
        clientcontext = clientcontext || CQ_Analytics.ClientContextMgr.get();
        if (!segmentPath) {
            return false
        }
        if (segmentPath instanceof Array) {
            return this.resolveArray(segmentPath, clientcontext)
        }
        if (segmentPath.indexOf(this.SEGMENTATION_ROOT) != 0) {
            return false
        }
        if (segmentPath == this.SEGMENTATION_ROOT) {
            return true
        }
        if (!this.segments[segmentPath]) {
            return true
        }
        var parent = segmentPath.substring(0, segmentPath.lastIndexOf("/"));
        if (parent.indexOf(this.SEGMENTATION_ROOT) == 0) {
            var pres = this.resolve(parent, clientcontext);
            if (pres !== true) {
                return pres
            }
        }
        var rules = "function(clientcontext, contextcloud, clickstreamcloud) { return true ";
        rules += " && ( " + this.segments[segmentPath] + " ) ";
        rules += ";}";
        var res = true;
        try {
            var f = null;
            this.rulesCache = this.rulesCache || {};
            if (this.rulesCache[segmentPath]) {
                f = this.rulesCache[segmentPath]
            } else {
                eval("f = " + rules + "");
                this.rulesCache[segmentPath] = f
            }
            var e = (f == null || f(clientcontext, clientcontext, clientcontext));
            res = res && (e === true)
        } catch (error) {
            return "Unresolved - Error while evaluating segment " + segmentPath + " : " + error.message
        }
        return res
    };
    CQ_Analytics.SegmentMgr.prototype.getResolved = function (c) {
        c = c || CQ_Analytics.ClientContextMgr.get();
        var a = new Array();
        for (var b in this.segments) {
            if (this.resolve(b, c) === true) {
                a.push(b)
            }
        }
        return a
    };
    CQ_Analytics.SegmentMgr.prototype.getMaxBoost = function (f, h) {
        if (!(f instanceof Array)) {
            return this.getBoost(f)
        }
        var c = 0;
        for (var d = 0;
             d < f.length;
             d++) {
            var g = f[d];
            if (this.resolve(g, h) === true) {
                var a = this.boosts[g] || 0;
                if (a > c) {
                    c = a
                }
            }
        }
        return c
    };
    CQ_Analytics.SegmentMgr.prototype.getBoost = function (a) {
        if (!(a instanceof Array)) {
            a = [a]
        }
        return this.boosts[a] || 0
    };
    CQ_Analytics.SegmentMgr.prototype.reload = function (path) {
        var url = path;
        if (!url) {
            url = this.SEGMENTATION_ROOT
        }
        if (url) {
            if (url.indexOf(this.SEGMENT_SELECTOR) == -1) {
                url += this.SEGMENT_SELECTOR
            }
            try {
                CQ_Analytics.Utils.load(url, function (config, status, response) {
                    if (response && response.responseText) {
                        eval(response.responseText)
                    }
                }, this);
                var response = CQ.HTTP.get(scripts[i].src)
            } catch (err) {
            }
        }
    };
    CQ_Analytics.SegmentMgr.prototype.getSessionStore = function () {
        return this
    };
    CQ_Analytics.SegmentMgr.prototype.getProperty = function (a) {
        return a
    };
    CQ_Analytics.SegmentMgr.prototype.getLink = function (a) {
        return a + ".html"
    };
    CQ_Analytics.SegmentMgr.prototype.getLabel = function (c) {
        if (c) {
            var b = c;
            var a = b.lastIndexOf("/");
            if (a != -1) {
                b = b.substring(a + 1, b.length)
            }
            var d = this.resolve(c);
            if (d === true) {
                return b
            } else {
                if (d !== true) {
                    return '<span class="invalid" title="' + d + '" alt="' + d + '">' + b + "</span>"
                }
            }
        }
        return c
    };
    CQ_Analytics.SegmentMgr.prototype.getPropertyNames = function () {
        return this.getResolved()
    };
    CQ_Analytics.SegmentMgr = new CQ_Analytics.SegmentMgr();
    CQ_Analytics.SegmentMgr.loadSegments = function (a) {
        CQ_Analytics.SegmentMgr.areSegmentsLoaded = false;
        CQ.shared.HTTP.get(CQ.shared.HTTP.externalize(a + ".segment.js"));
        CQ_Analytics.SegmentMgr.areSegmentsLoaded = true;
        this.fireEvent("segmentsload")
    };
    CQ_Analytics.SegmentMgr.renderer = function (a, c) {
        if (a && a.STORENAME == CQ_Analytics.SegmentMgr.STORENAME) {
            var f = a.getPropertyNames();
            var g = [];
            g.push("<div>");
            for (var d = 0;
                 d < f.length;
                 d++) {
                var b = f[d];
                g.push('<span title="' + a.getProperty(b) + '" ><a href="' + CQ.shared.HTTP.externalize(a.getLink(b)) + '"  title="' + a.getProperty(b) + '" >' + a.getLabel(b) + "</a></span>")
            }
            g.push("</div>");
            $CQ("#" + c).children().remove();
            $CQ("#" + c).append(g.join(""))
        }
    };
    CQ_Analytics.ClientContextMgr.addListener("storeupdate", CQ_Analytics.SegmentMgr.fireUpdate);
    CQ_Analytics.Utils.addListener(window, "unload", function () {
        try {
            for (var b in CQ_Analytics.SegmentMgr) {
                delete CQ_Analytics.SegmentMgr[b]
            }
        } catch (a) {
        }
        CQ_Analytics.SegmentMgr = null
    })
}
if (!CQ_Analytics.StrategyMgr) {
    CQ_Analytics.StrategyMgr = function () {
        this.strategies = {}
    };
    CQ_Analytics.StrategyMgr.prototype = {};
    CQ_Analytics.StrategyMgr.prototype.isRegistered = function (a) {
        return !!this.strategies[a]
    };
    CQ_Analytics.StrategyMgr.prototype.register = function (b, a) {
        if (typeof a == "function") {
            this.strategies[b] = a
        }
    };
    CQ_Analytics.StrategyMgr.prototype.choose = function (b, a) {
        if (a.length == 1) {
            return a[0]
        }
        if (this.strategies[b]) {
            return this.strategies[b].call(this, a)
        }
        return null
    };
    CQ_Analytics.StrategyMgr = new CQ_Analytics.StrategyMgr()
}
CQ_Analytics.StrategyMgr.register("clickstream-score", function (k) {
    if (k.length == 1) {
        return k[0]
    }
    var a = [];
    if (CQ_Analytics.TagCloudMgr) {
        var n = CQ_Analytics.TagCloudMgr.getTags();
        n = n || {};
        var m = -1;
        for (var f = 0;
             f < k.length;
             f++) {
            var h = 0;
            var l = k[f].tags;
            if (l) {
                for (var d = 0;
                     d < l.length;
                     d++) {
                    var g = l[d].tagID;
                    h += parseInt(n[g]) || 0
                }
            }
            if (h == m) {
                a.push(k[f])
            } else {
                if (h > m) {
                    a = [];
                    a.push(k[f]);
                    m = h
                }
            }
        }
    } else {
        a = k
    }
    if (a.length == 1) {
        return a[0]
    }
    var b = null;
    if (CQ_Analytics.PageDataMgr) {
        b = CQ_Analytics.PageDataMgr.getProperty("random")
    }
    if (!b) {
        b = window.CQ_StrategyRandom
    }
    if (!b) {
        b = window.CQ_StrategyRandom = Math.random()
    }
    if (parseFloat(b) > 1) {
        b = 1 / b
    }
    if (parseFloat(b) == 1) {
        b = 0
    }
    var c = Math.floor(b * a.length);
    return a[c]
});
CQ_Analytics.StrategyMgr.register("first", function (a) {
    return a[0]
});
CQ_Analytics.StrategyMgr.register("random", function (c) {
    var a = null;
    if (CQ_Analytics.PageDataMgr) {
        a = CQ_Analytics.PageDataMgr.getProperty("random")
    }
    if (!a) {
        a = window.CQ_StrategyRandom
    }
    if (!a) {
        a = window.CQ_StrategyRandom = Math.random()
    }
    if (parseFloat(a) > 1) {
        a = 1 / a
    }
    if (parseFloat(a) == 1) {
        a = 0
    }
    var b = Math.floor(a * c.length);
    return c[b]
});
if (!CQ_Analytics.PageDataMgr) {
    CQ_Analytics.PageDataMgr = function () {
    };
    CQ_Analytics.PageDataMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.PageDataMgr.prototype.STORENAME = "pagedata";
    CQ_Analytics.PageDataMgr.prototype.FORCE_EXPERIENCE_COOKIE = "cq-forceexperience";
    CQ_Analytics.PageDataMgr.prototype.init = function () {
        this.data = {};
        for (var a in this.initProperty) {
            this.data[a] = this.initProperty[a]
        }
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.PageDataMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.PageDataMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.PageDataMgr.prototype.setExperience = function (a) {
        CQ.shared.HTTP.setCookie(CQ_Analytics.PageDataMgr.FORCE_EXPERIENCE_COOKIE, a, "/")
    };
    CQ_Analytics.PageDataMgr.prototype.getExperience = function () {
        return CQ.shared.HTTP.getCookie(CQ_Analytics.PageDataMgr.FORCE_EXPERIENCE_COOKIE, "/")
    };
    CQ_Analytics.PageDataMgr.prototype.clearExperience = function () {
        CQ.shared.HTTP.clearCookie(CQ_Analytics.PageDataMgr.FORCE_EXPERIENCE_COOKIE, "/")
    };
    CQ_Analytics.PageDataMgr = new CQ_Analytics.PageDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        this.loadInitProperties(CQ_Analytics.CCM.getInitialData(this.getName()));
        this.init();
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.PageDataMgr)
}
CQ_Analytics.BrowserInfo = function () {
    var h = navigator.userAgent.toLowerCase();
    var d = function (b) {
        return b.test(h)
    };
    var g = function () {
        if (d(/opera/)) {
            return {browserFamily: "Opera", browserVersion: ""}
        }
        if (d(/chrome/)) {
            return {browserFamily: "Chrome", browserVersion: ""}
        }
        if (d(/safari/)) {
            if (d(/applewebkit\/4/)) {
                return {browserFamily: "Safari", browserVersion: "2"}
            }
            if (d(/version\/3/)) {
                return {browserFamily: "Safari", browserVersion: "3"}
            }
            if (d(/version\/4/)) {
                return {browserFamily: "Safari", browserVersion: "4"}
            }
            if (d(/version\/5/)) {
                return {browserFamily: "Safari", browserVersion: "5"}
            }
            if (d(/version\/6/)) {
                return {browserFamily: "Safari", browserVersion: "6"}
            }
            return {browserFamily: "Safari", browserVersion: "7 or higher"}
        }
        if (d(/webkit/)) {
            return {browserFamily: "WebKit", browserVersion: ""}
        }
        if (d(/msie/)) {
            if (d(/msie 6/)) {
                return {browserFamily: "IE", browserVersion: "6"}
            }
            if (d(/msie 7/)) {
                return {browserFamily: "IE", browserVersion: "7"}
            }
            if (d(/msie 8/)) {
                return {browserFamily: "IE", browserVersion: "8"}
            }
            if (d(/msie 9/)) {
                return {browserFamily: "IE", browserVersion: "9"}
            }
            if (d(/msie 10/)) {
                return {browserFamily: "IE", browserVersion: "10"}
            }
            return {browserFamily: "IE", browserVersion: "11 or higher"}
        }
        if (d(/gecko/)) {
            if (d(/rv:1\.8/)) {
                return {browserFamily: "Firefox", browserVersion: "2"}
            }
            if (d(/rv:1\.9/)) {
                return {browserFamily: "Firefox", browserVersion: "3"}
            }
            if (d(/rv:2.0/)) {
                return {browserFamily: "Firefox", browserVersion: "4"}
            }
            if (d(/rv:5./)) {
                return {browserFamily: "Firefox", browserVersion: "5"}
            }
            if (d(/rv:6./)) {
                return {browserFamily: "Firefox", browserVersion: "6"}
            }
            if (d(/rv:7./)) {
                return {browserFamily: "Firefox", browserVersion: "7"}
            }
            if (d(/rv:8./)) {
                return {browserFamily: "Firefox", browserVersion: "8"}
            }
            if (d(/rv:9./)) {
                return {browserFamily: "Firefox", browserVersion: "9"}
            }
            return {browserFamily: "Firefox", browserVersion: "10 or higher"}
        }
        var b = d(/adobeair/);
        if (b) {
            return {browserFamily: "Adobe AIR", browserVersion: ""}
        }
        return {browserFamily: "Unresolved", browserVersion: "Unresolved"}
    };
    var f = function () {
        if (d(/windows 98|win98/)) {
            return "Windows 98"
        }
        if (d(/windows nt 5.0|windows 2000/)) {
            return "Windows 2000"
        }
        if (d(/windows nt 5.1|windows xp/)) {
            return "Windows XP"
        }
        if (d(/windows nt 5.2/)) {
            return "Windows Server 2003"
        }
        if (d(/windows nt 6.0/)) {
            return "Windows Vista"
        }
        if (d(/windows nt 6.1/)) {
            return "Windows 7"
        }
        if (d(/windows nt 4.0|winnt4.0|winnt/)) {
            return "Windows NT 4.0"
        }
        if (d(/windows me/)) {
            return "Windows ME"
        }
        if (d(/mac os x/)) {
            if (d(/ipad/) || d(/iphone/)) {
                return "iOS"
            }
            return "Mac OS X"
        }
        if (d(/macintosh|mac os/)) {
            return "Mac OS"
        }
        if (d(/android/)) {
            return "Android"
        }
        if (d(/linux/)) {
            return "Linux"
        }
        return "Unresolved"
    };
    var c = function () {
        if (d(/ipad/)) {
            return "iPad"
        }
        if (d(/iphone/)) {
            return "iPhone"
        }
        if (d(/mobi/)) {
            return "Mobile"
        }
        return "Desktop"
    };
    var a = g.call();
    this.browserFamily = a.browserFamily;
    this.browserVersion = a.browserVersion;
    this.OSName = f.call();
    this.deviceType = c.call();
    this.ua = h;
    var j = /^https/i.test(window.location.protocol);
    this.screenResolution = screen.width + "x" + screen.height
};
CQ_Analytics.BrowserInfo.prototype = {
    getBrowserName: function () {
        return this.browserFamily + " " + this.browserVersion
    }, getBrowserFamily: function () {
        return this.browserFamily
    }, getBrowserVersion: function () {
        return this.browserVersion
    }, getOSName: function () {
        return this.OSName
    }, getScreenResolution: function () {
        return this.screenResolution
    }, getDeviceType: function () {
        return this.deviceType
    }, getUserAgent: function () {
        return this.ua
    }, isMobile: function (a) {
        if (!a) {
            a = this.getDeviceType()
        }
        a = a ? a.toLowerCase() : "desktop";
        return a != "desktop"
    }, isIE: function (a) {
        return this.getBrowserFamily() == "IE" && (a ? this.getBrowserVersion() == a : true)
    }, isIE6: function () {
        return this.isIE("6")
    }, isIE7: function () {
        return this.isIE("7")
    }, isIE8: function () {
        return this.isIE("8")
    }, isIE9: function () {
        return this.isIE("9")
    }
};
CQ_Analytics.BrowserInfoInstance = new CQ_Analytics.BrowserInfo();
if (!CQ_Analytics.MousePositionMgr) {
    CQ_Analytics.MousePositionMgr = function () {
        this.position = {x: 0, y: 0};
        this.getPageX = function (c) {
            var b = c.pageX;
            if (!b && 0 !== b) {
                b = c.clientX || 0
            }
            return b
        };
        this.getPageY = function (b) {
            var c = b.pageY;
            if (!c && 0 !== c) {
                c = b.clientY || 0
            }
            return c
        };
        var a = this;
        this.timer = null;
        $CQ(document).bind("mousemove", function (h, g, f, l) {
            var j = h || window.event;
            if (j) {
                if (!a.timer) {
                    var d = a.getPageX(j);
                    var k = a.getPageY(j);
                    a.timer = setTimeout(function () {
                        a.setPosition(d, k);
                        a.timer = null
                    }, 500)
                }
            }
        });
        this.init()
    };
    CQ_Analytics.MousePositionMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.MousePositionMgr.prototype.STORENAME = "mouseposition";
    CQ_Analytics.MousePositionMgr.prototype.setPosition = function (a, b) {
        this.position.x = a;
        this.position.y = b;
        this.fireEvent("update")
    };
    CQ_Analytics.MousePositionMgr.prototype.getProperty = function (a) {
        return this.position[a]
    };
    CQ_Analytics.MousePositionMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.MousePositionMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.MousePositionMgr.prototype.getPropertyNames = function () {
        var a = new Array();
        for (var b in this.position) {
            a.push(b)
        }
        return a
    };
    CQ_Analytics.MousePositionMgr.prototype.getSessionStore = function () {
        return this
    };
    CQ_Analytics.MousePositionMgr.prototype.getData = function (a) {
        return this.position
    };
    CQ_Analytics.MousePositionMgr.prototype.clear = function () {
        this.position = {}
    };
    CQ_Analytics.MousePositionMgr = new CQ_Analytics.MousePositionMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.MousePositionMgr)
}
if (!CQ_Analytics.EventDataMgr) {
    CQ_Analytics.EventDataMgr = function () {
    };
    CQ_Analytics.EventDataMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.EventDataMgr.prototype.STORENAME = "eventdata";
    CQ_Analytics.EventDataMgr.prototype.init = function () {
        this.data = {};
        for (var a in this.initProperty) {
            this.data[a] = this.initProperty[a]
        }
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.EventDataMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.EventDataMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.EventDataMgr = new CQ_Analytics.EventDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        this.loadInitProperties(CQ_Analytics.CCM.getInitialData(this.getName()));
        this.init();
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.EventDataMgr)
}
if (!window.CQ_Context) {
    window.CQ_Context = function () {
    };
    window.CQ_Context.prototype = new CQ_Analytics.Observable();
    window.CQ_Context.prototype.getProfile = function () {
        return (function () {
            return {
                getUserId: function () {
                    return this.getProperty("authorizableId")
                }, getDisplayName: function () {
                    var a = this.getProperty("formattedName");
                    if (a) {
                        return a
                    }
                    a = this.getProperty("displayName");
                    if (a) {
                        return a
                    }
                    return this.getUserId()
                }, getFirstname: function () {
                    return this.getProperty("givenName")
                }, getLastname: function () {
                    return this.getProperty("familyName")
                }, getEmail: function () {
                    return this.getProperty("email")
                }, getProperty: function (a) {
                    if (CQ_Analytics && CQ_Analytics.ProfileDataMgr) {
                        return CQ_Analytics.ProfileDataMgr.getProperty(a)
                    }
                    return ""
                }, getProperties: function () {
                    if (CQ_Analytics && CQ_Analytics.ProfileDataMgr) {
                        return CQ_Analytics.ProfileDataMgr.getData()
                    }
                    return {}
                }, getAvatar: function () {
                    return this.getProperty("avatar")
                }, onUpdate: function (a, b) {
                    if (a && CQ_Analytics && CQ_Analytics.ProfileDataMgr) {
                        CQ_Analytics.ProfileDataMgr.addListener("update", a, b || this)
                    }
                }
            }
        })()
    };
    window.CQ_Context = new window.CQ_Context()
}
CQ_Analytics.Engine = function () {
    window.CQ_trackTeasersStats = true;
    function j() {
        return !!(window.CQ && CQ.WCM && CQ.WCM.isEditMode())
    }

    function c(n) {
        var l = $CQ.Deferred();
        var m = CQ.WCM.getEditable(n);
        if (m) {
            l.resolve(m)
        } else {
            CQ.WCM.onEditableReady(n, function (o) {
                l.resolve(o)
            })
        }
        return l.promise()
    }

    function g(m, l) {
        if (!CQ_Analytics.loadedTeasersStack) {
            CQ_Analytics.loadedTeasersStack = [];
            $CQ(window).unload(function () {
                try {
                    var n = CQ_Analytics.loadedTeasersStack;
                    if (n) {
                        delete CQ_Analytics.loadedTeasersStack;
                        var p = l;
                        for (var q = 0;
                             q < n.length;
                             q++) {
                            p = CQ.shared.HTTP.addParameter(p, "path", n[q])
                        }
                        CQ.shared.HTTP.get(p, function () {
                        })
                    }
                } catch (o) {
                }
            })
        }
        CQ_Analytics.loadedTeasersStack.push(m.path)
    }

    function d(r, q, n) {
        var p = "", s;

        function l(x, w, y, v) {
            return '<a href="' + w + '" class="cq-teaser-segment-link"><img src="' + y + '" class="cq-teaser-decision-thumbnail ' + (v ? "cq-teaser-decision-match" : "cq-teaser-decision-nomatch") + '"></a>' + x + "<br>"
        }

        for (var o = 0;
             o < r.length;
             o++) {
            var m = r[o];
            var u = CQ.shared.HTTP.externalize(m.teaser.path + ".html");
            if (m.hasOwnProperty("boost")) {
                if (m.noSegment) {
                    s = CQ.I18n.getMessage("Experience: {0} - match (no segments, boost = {1})", [m.teaser.title, m.boost])
                } else {
                    s = CQ.I18n.getMessage("Experience: {0} - match (boost = {1})", [m.teaser.title, m.boost])
                }
                var t = l(s, u, m.teaser.thumbnail, true);
                if (q === m.teaser.path) {
                    p += "<b>" + t + "</b>"
                } else {
                    p += t
                }
            } else {
                if (m.unknownSegment) {
                    s = CQ.I18n.getMessage("Experience: {0} - no match (unknown segment)", [m.teaser.title])
                } else {
                    s = CQ.I18n.getMessage("Experience: {0} - no match", [m.teaser.title])
                }
                p += l(s, u, m.teaser.thumbnail, false)
            }
        }
        p += "<br>";
        if (n) {
            p += CQ.I18n.getMessage("Strategy <b>{0}</b> selected current teaser.", n)
        } else {
            p += CQ.I18n.getMessage("No strategy configured, used the first match.")
        }
        p += "<br>";
        return p
    }

    function k(n, m, l, o) {
        n.done(function (p) {
            if (p.teaserToolTip) {
                p.teaserToolTip.hide();
                p.teaserToolTip.remove()
            }
            p.teaserToolTip = new CQ.Ext.Tip({
                html: d(m, l, o),
                title: CQ.I18n.getMessage("Selection decision"),
                width: 450,
                autoHide: false,
                closable: true,
                height: 300,
                floating: true,
                autoHeight: false,
                bodyStyle: "overflow-y: scroll;"
            });
            p.on(CQ.wcm.EditRollover.EVENT_SHOW_HIGHTLIGHT, function (q) {
                if (!this.teaserInfoButton) {
                    this.teaserInfoButton = CQ.Ext.DomHelper.append("CQ", {
                        tag: "div",
                        cls: "x-tool x-tool-help cq-teaser-tooltip-tool"
                    }, true);
                    this.teaserInfoButton.position("absolute");
                    this.teaserInfoButton.on("click", function () {
                        var r = this.getXY();
                        p.teaserToolTip.setPosition(r[0] - 460, r[1] - 100);
                        p.teaserToolTip.show()
                    })
                }
                this.teaserInfoButton.anchorTo(q.frameBottom.getEl(), "tr", [-26, -15]);
                this.teaserInfoButton.show()
            });
            p.on(CQ.wcm.EditRollover.EVENT_HIDE_HIGHTLIGHT, function (q) {
                if (this.teaserInfoButton) {
                    this.teaserInfoButton.hide()
                }
            })
        })
    }

    function h(l) {
        l.done(function (m) {
            if (m.teaserToolTip) {
                m.teaserToolTip.hide();
                m.teaserToolTip.remove();
                m.teaserToolTip = null
            }
        })
    }

    function b(u, t) {
        var p = [];
        var r = 0;
        for (var n = 0;
             n < u.length;
             n++) {
            var m = u[n], q = m.segments;
            var l;
            if (t) {
                l = {teaser: m};
                t.push(l)
            }
            var o = !q || q.length === 0;
            if (o && l) {
                l.noSegment = true
            }
            if (!o && CQ_Analytics.SegmentMgr.resolve(q)) {
                o = true;
                if (q && q.length > 0) {
                    if (!CQ_Analytics.SegmentMgr.segments[q[0]]) {
                        o = false;
                        if (l) {
                            l.unknownSegment = true
                        }
                    }
                }
            }
            if (o) {
                var s = CQ_Analytics.SegmentMgr.getMaxBoost(q);
                if (l) {
                    l.boost = s
                }
                if (s === r) {
                    p.push(m)
                } else {
                    if (s > r) {
                        p = [];
                        p.push(m);
                        r = s
                    }
                }
            }
        }
        return p
    }

    var a = {};

    function f(l, m) {
        CQ_Analytics.Engine.stopTeaserLoader(l);
        a[l] = m
    }

    return {
        stopTeaserLoader: function (m) {
            var l = m.path || m;
            if (!l) {
                return
            }
            var n = a[l];
            if (n) {
                CQ_Analytics.SegmentMgr.removeListener("update", n);
                delete a[l]
            }
        }, resolveTeaser: function (o, n, l) {
            var m = b(o, l);
            if (m.length === 0) {
                return null
            }
            return CQ_Analytics.StrategyMgr.choose(n, m) || m[0]
        }, loadTeaser: function (l) {
            var o, n;
            if (j()) {
                n = CQ.WCM.getEditablePathFromDOM(document.getElementById(l.targetID));
                o = c(n)
            }
            var p = ClientContext.get("campaign");
            if (p && p.isCampaignSelected()) {
                return
            }
            var m = function () {
                var s = CQ_Analytics.PageDataMgr.getExperience();
                if (s) {
                    CQ_Analytics.PageDataMgr.clearExperience();
                    var t = "/_jcr_content/par.html";
                    if (j()) {
                        t += "?wcmmode=disabled"
                    }
                    CQ_Analytics.Utils.loadElement(s + t, l.targetID);
                    return
                }
                var r = null;
                var q = function () {
                    var v = null;
                    if (j()) {
                        v = []
                    }
                    var w = CQ_Analytics.Engine.resolveTeaser(l.teasers, l.strategy, v);
                    if (w) {
                        if (!r || r.path !== w.path) {
                            r = w;
                            var u = w.url;
                            if (j()) {
                                u += "?wcmmode=disabled"
                            }
                            CQ_Analytics.Utils.loadTeaserElement(u, l.targetID);
                            if (window.CQ_trackTeasersStats && l.trackingURL) {
                                g(w, l.trackingURL)
                            }
                            if (o) {
                                k(o, v, r.path, l.strategy)
                            }
                        }
                    } else {
                        if (o) {
                            h(o)
                        }
                        CQ_Analytics.Utils.clearElement(l.targetID);
                        r = null
                    }
                };
                q.call();
                if (CQ_Analytics.SegmentMgr) {
                    if (n) {
                        f(n, q)
                    }
                    CQ_Analytics.SegmentMgr.addListener("update", q)
                }
            };
            if (CQ_Analytics.CCM.areStoresInitialized) {
                m.call(this)
            } else {
                CQ_Analytics.CCM.addListener("storesinitialize", m)
            }
        }
    }
}();
window.CQ_trackTeasersStats = true;
function initializeTeaserLoader(b, g, h, f, a, d) {
    f = !!(CQ.Ext && (f == "true" || f === true));
    if (window.CQ_Analytics) {
        var c = function () {
            var o = "/_jcr_content/par.html";
            if (f) {
                o += "?wcmmode=disabled"
            }
            var m = CQ_Analytics.PageDataMgr.getExperience();
            if (m) {
                CQ_Analytics.PageDataMgr.clearExperience();
                CQ_Analytics.Utils.loadElement(m + o, h);
                return
            }
            var n = function (r) {
                var t = "";
                var x = new Array();
                if (CQ_Analytics.SegmentMgr) {
                    var v = 0;
                    for (var s = 0;
                         s < b.length;
                         s++) {
                        var u = CQ.shared.HTTP.externalize(b[s].path + ".html");
                        if (!b[s]["segments"] || b[s]["segments"].length == 0 || CQ_Analytics.SegmentMgr.resolveArray(b[s]["segments"]) === true) {
                            var q = CQ_Analytics.SegmentMgr.getMaxBoost(b[s]["segments"]);
                            var w = [b[s]["title"], q, b[s].thumbnail, u];
                            if (r == b[s].path) {
                                t += CQ.I18n.getMessage('<b><a href="{3}" class="cq-teaser-segment-link"><img src="{2}" class="cq-teaser-decision-thumbnail cq-teaser-decision-match"></a>Experience: {0} - match ( boost = {1} )</b><br>', w)
                            } else {
                                t += CQ.I18n.getMessage('<a href="{3}" class="cq-teaser-segment-link"><img src="{2}" class="cq-teaser-decision-thumbnail cq-teaser-decision-match"></a>Experience: {0} - match ( boost = {1} )<br>', w)
                            }
                            if (q == v) {
                                x.push(b[s])
                            } else {
                                if (q > v) {
                                    x = new Array();
                                    x.push(b[s]);
                                    v = q
                                }
                            }
                        } else {
                            var w = [b[s]["title"], b[s].thumbnail, u];
                            t += CQ.I18n.getMessage('<a href="{2}" class="cq-teaser-segment-link"><img src="{1}" class="cq-teaser-decision-thumbnail cq-teaser-decision-nomatch"></a>Experience: {0} - no match<br>', w)
                        }
                    }
                }
                t += CQ.I18n.getMessage("<br>Strategy <b>{0}</b> selected current teaser.<br>", g);
                return t
            };
            var l = null;
            var j = null;
            var k = function () {
                var w = new Array();
                if (CQ_Analytics.SegmentMgr) {
                    var u = 0;
                    for (var s = 0;
                         s < b.length;
                         s++) {
                        if (!b[s]["segments"] || b[s]["segments"].length == 0 || CQ_Analytics.SegmentMgr.resolveArray(b[s]["segments"]) === true) {
                            var p = CQ_Analytics.SegmentMgr.getMaxBoost(b[s]["segments"]);
                            if (p == u) {
                                w.push(b[s])
                            } else {
                                if (p > u) {
                                    w = new Array();
                                    w.push(b[s]);
                                    u = p
                                }
                            }
                        }
                    }
                }
                if (w.length > 0) {
                    var v = w[0];
                    if (CQ_Analytics.StrategyMgr) {
                        var t = CQ_Analytics.StrategyMgr.choose(g, w);
                        if (t != null) {
                            v = t
                        }
                    }
                    if (!l || l.path != v.path) {
                        l = v;
                        var q = v.path + o;
                        q = CQ.shared.HTTP.addSelectors(q, CQ.shared.HTTP.getSelectors(window.location.href));
                        CQ_Analytics.Utils.loadTeaserElement(q, h);
                        if (window.CQ_trackTeasersStats && a) {
                            if (!CQ_Analytics.loadedTeasersStack) {
                                CQ_Analytics.loadedTeasersStack = [];
                                $CQ(window).unload(function () {
                                    try {
                                        var x = CQ_Analytics.loadedTeasersStack;
                                        if (x) {
                                            delete CQ_Analytics.loadedTeasersStack;
                                            var z = a;
                                            for (var A = 0;
                                                 A < x.length;
                                                 A++) {
                                                z = CQ.shared.HTTP.addParameter(z, "path", x[A])
                                            }
                                            CQ.shared.HTTP.get(z, function () {
                                            })
                                        }
                                    } catch (y) {
                                    }
                                })
                            }
                            CQ_Analytics.loadedTeasersStack.push(v.path)
                        }
                        if (f) {
                            if (d) {
                                var r = CQ.WCM.getEditable(d);
                                if (r) {
                                    if (r && r.teaserToolTip) {
                                        r.teaserToolTip.hide();
                                        r.teaserToolTip.remove();
                                        r.teaserToolTip = null
                                    } else {
                                        r.on(CQ.wcm.EditRollover.EVENT_SHOW_HIGHTLIGHT, function (x) {
                                            if (!this.teaserInfoButton) {
                                                this.teaserInfoButton = CQ.Ext.DomHelper.append("CQ", {
                                                    tag: "div",
                                                    cls: "x-tool x-tool-help cq-teaser-tooltip-tool"
                                                }, true);
                                                this.teaserInfoButton.position("absolute");
                                                this.teaserInfoButton.on("click", function () {
                                                    if (!r.teaserToolTip) {
                                                        r.teaserToolTip = new CQ.Ext.Tip({
                                                            html: n(l.path),
                                                            title: CQ.I18n.getMessage("Selection decision"),
                                                            width: 450,
                                                            autoHide: false,
                                                            closable: true,
                                                            height: 300,
                                                            floating: true,
                                                            autoHeight: false,
                                                            bodyStyle: "overflow-y: scroll;"
                                                        })
                                                    }
                                                    var y = this.getXY();
                                                    r.teaserToolTip.setPosition(y[0] - 460, y[1] - 100);
                                                    r.teaserToolTip.show()
                                                })
                                            }
                                            this.teaserInfoButton.anchorTo(x.frameBottom.getEl(), "tr", [-26, -15]);
                                            this.teaserInfoButton.show()
                                        });
                                        r.on(CQ.wcm.EditRollover.EVENT_HIDE_HIGHTLIGHT, function (x) {
                                            if (this.teaserInfoButton) {
                                                this.teaserInfoButton.hide()
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (f) {
                        var r = CQ.WCM.getEditable(d);
                        if (r && r.teaserToolTip) {
                            r.teaserToolTip.hide();
                            r.teaserToolTip.remove();
                            r.teaserToolTip = null
                        }
                    }
                    CQ_Analytics.Utils.clearElement(h);
                    l = null
                }
            };
            k.call();
            if (CQ_Analytics.SegmentMgr) {
                CQ_Analytics.SegmentMgr.addListener("update", k)
            }
        };
        if (CQ_Analytics.CCM.areStoresInitialized) {
            c.call(this)
        } else {
            CQ_Analytics.CCM.addListener("storesinitialize", c)
        }
    }
}
window.CQ_trackLandingPagesStats = true;
function initializeLandingPageLoader(g, d, f, c, a) {
    c = CQ.Ext && (c == "true" || c === true);
    if (window.CQ_Analytics) {
        var h = ".html";
        var b = function () {
            var k = null;
            var j = function () {
                var m = new Array();
                if (CQ_Analytics.SegmentMgr) {
                    var t = 0;
                    for (var q = 0;
                         q < g.length;
                         q++) {
                        if (!g[q]["segments"] || g[q]["segments"].length == 0 || CQ_Analytics.SegmentMgr.resolveArray(g[q]["segments"]) === true) {
                            var w = CQ_Analytics.SegmentMgr.getMaxBoost(g[q]["segments"]);
                            if (w == t) {
                                m.push(g[q])
                            } else {
                                if (w > t) {
                                    m = new Array();
                                    m.push(g[q]);
                                    t = w
                                }
                            }
                        }
                    }
                }
                if (m.length > 0) {
                    var p = m[0];
                    if (CQ_Analytics.StrategyMgr) {
                        var u = CQ_Analytics.StrategyMgr.choose(d, m);
                        if (u != null) {
                            p = u
                        }
                    }
                    if (!k || k.path != p.path) {
                        var y = k;
                        k = p;
                        var o = CQ.shared.HTTP.get(p.path + h);
                        var z = o.responseText;
                        var r = function (L, B) {
                            var I = "";
                            if (L && L.indexOf('id="' + B + '"') != -1) {
                                var H = L.indexOf('id="' + B + '"');
                                var C = L.substring(0, H).lastIndexOf("<div");
                                var G = L.substring(C);
                                var K = G.split(new RegExp("<div", "ig"));
                                var E = 0;
                                for (var F = 0;
                                     F < K.length;
                                     F++) {
                                    E++;
                                    var J = K[F].split(new RegExp("</div", "ig"));
                                    for (var D = 1;
                                         D < J.length;
                                         D++) {
                                        E--;
                                        if (E == 1) {
                                            var A = K[F].lastIndexOf("</div") + 6;
                                            A = G.indexOf(K[F]) + A;
                                            G = G.substring(0, A);
                                            G = G.substring(G.indexOf(">") + 1, G.lastIndexOf("</div"));
                                            return G
                                        }
                                    }
                                }
                            }
                            return ""
                        };
                        z = r(z, f);
                        var v = $CQ("#" + f)[0];
                        var s = function (C, A) {
                            if (c) {
                                var D = CQ.WCM.getEditables();
                                for (var E in D) {
                                    var B = D[E];
                                    if (!C || B.path.indexOf(C) != -1) {
                                        B.hide();
                                        B.remove()
                                    }
                                }
                            }
                        };
                        var n = document.createElement("div");
                        n.innerHTML = z;
                        if (y) {
                            $CQ("object", v).parent().fadeOut("slow");
                            $CQ("img", v).fadeOut("slow");
                            $CQ(v).slideUp("slow", function () {
                                s(y.path, false);
                                $CQ(v).children().remove();
                                var A = v.insertBefore(n, v.firstChild);
                                $CQ(v).slideDown("slow", function () {
                                    if (c) {
                                        CQ.DOM.executeScripts(CQ.Ext.get(n))
                                    }
                                })
                            })
                        } else {
                            var l = v.insertBefore(n, v.firstChild);
                            $CQ(v).slideDown("slow", function () {
                                if (c) {
                                    CQ.DOM.executeScripts(CQ.Ext.get(n))
                                }
                            })
                        }
                        try {
                            if (window.CQ_trackLandingPagesStats && a) {
                                if (!CQ_Analytics.loadedLandingPagesStack) {
                                    CQ_Analytics.loadedLandingPagesStack = [];
                                    $CQ(window).unload(function () {
                                        try {
                                            var D = CQ_Analytics.loadedLandingPagesStack;
                                            if (D) {
                                                delete CQ_Analytics.loadedLandingPagesStack;
                                                var B = a;
                                                for (var C = 0;
                                                     C < D.length;
                                                     C++) {
                                                    B = CQ.shared.HTTP.addParameter(B, "path", D[C])
                                                }
                                                CQ.shared.HTTP.get(B, function () {
                                                })
                                            }
                                        } catch (A) {
                                        }
                                    })
                                }
                                CQ_Analytics.loadedLandingPagesStack.push(p.path)
                            }
                        } catch (x) {
                        }
                    }
                } else {
                    CQ_Analytics.Utils.clearElement(f);
                    k = null
                }
            };
            j.call();
            if (CQ_Analytics.SegmentMgr) {
                CQ_Analytics.SegmentMgr.addListener("update", j)
            }
        };
        if (CQ_Analytics.ClickstreamcloudMgr) {
            if (CQ_Analytics.ClickstreamcloudMgr.areStoresLoaded) {
                b.call(this)
            } else {
                CQ_Analytics.ClickstreamcloudMgr.addListener("storesloaded", b)
            }
        }
    }
}
CQ_Analytics.PersistedJSONStore = function () {
};
CQ_Analytics.PersistedJSONStore.prototype = new CQ_Analytics.PersistedSessionStore();
CQ_Analytics.PersistedJSONStore.prototype.STOREKEY = "";
CQ_Analytics.PersistedJSONStore.prototype.STORENAME = "";
CQ_Analytics.PersistedJSONStore.prototype.init = function () {
    var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
    var b = a.get(this.getStoreKey());
    if (!b || b == "") {
        this.data = {};
        for (var c in this.initProperty) {
            this.data[c] = this.initProperty[c]
        }
    } else {
        this.data = this.parse(b)
    }
    this.persist();
    this.initialized = true;
    this.fireEvent("initialize", this);
    this.fireEvent("update")
};
CQ_Analytics.PersistedJSONStore.prototype.clear = function () {
    var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
    a.remove(this.getStoreKey());
    this.data = null;
    this.initProperty = {}
};
CQ_Analytics.PersistedJSONStore.prototype.initJSON = function (b, c) {
    if (!c) {
        this.initProperty = {}
    }
    var a = function (h, d, g) {
        for (var f in g) {
            if (typeof g[f] == "object") {
                a(h, d ? d + "/" + f : f, g[f])
            } else {
                h[d ? d + "/" + f : f] = g[f]
            }
        }
    };
    a(this.initProperty, null, b)
};
CQ_Analytics.PersistedJSONStore.prototype.getJSON = function () {
    var f = this.getData();
    var c = {};
    for (var h in f) {
        var d = h.split("/");
        var g = c;
        for (var b = 0;
             b < d.length;
             b++) {
            var a = d[b];
            if (b == d.length - 1) {
                g[a] = f[h]
            } else {
                g[a] = g[a] || {};
                g = g[a]
            }
        }
    }
    return c
};
CQ_Analytics.PersistedJSONStore.getInstance = function (a, c) {
    var b = new CQ_Analytics.PersistedJSONStore();
    b.STOREKEY = a.toUpperCase();
    b.STORENAME = a;
    b.initJSON(c);
    return b
};
CQ_Analytics.PersistedJSONStore.registerNewInstance = function (a, b) {
    var c = CQ_Analytics.PersistedJSONStore.getInstance(a, b);
    c.init();
    CQ_Analytics.CCM.register(c);
    return c
};
CQ_Analytics.JSONStore = function () {
};
CQ_Analytics.JSONStore.prototype = new CQ_Analytics.SessionStore();
CQ_Analytics.JSONStore.prototype.STOREKEY = "";
CQ_Analytics.JSONStore.prototype.STORENAME = "";
CQ_Analytics.JSONStore.prototype.init = function () {
    this.data = {};
    for (var a in this.initProperty) {
        this.data[a] = this.initProperty[a]
    }
    this.initialized = true;
    this.fireEvent("initialize", this);
    this.fireEvent("update")
};
CQ_Analytics.JSONStore.prototype.clear = function () {
    this.data = null;
    this.initProperty = {}
};
CQ_Analytics.JSONStore.prototype.initJSON = function (b, c) {
    if (!c) {
        this.initProperty = {}
    }
    var a = function (h, d, g) {
        for (var f in g) {
            if (typeof g[f] == "object") {
                a(h, d ? d + "/" + f : f, g[f])
            } else {
                h[d ? d + "/" + f : f] = g[f]
            }
        }
    };
    a(this.initProperty, null, b)
};
CQ_Analytics.JSONStore.prototype.getJSON = function () {
    var f = this.getData();
    var c = {};
    for (var h in f) {
        var d = h.split("/");
        var g = c;
        for (var b = 0;
             b < d.length;
             b++) {
            var a = d[b];
            if (b == d.length - 1) {
                g[a] = f[h]
            } else {
                g[a] = g[a] || {};
                g = g[a]
            }
        }
    }
    return c
};
CQ_Analytics.JSONStore.getInstance = function (a, c) {
    var b = new CQ_Analytics.JSONStore();
    b.STOREKEY = a.toUpperCase();
    b.STORENAME = a;
    b.initJSON(c);
    return b
};
CQ_Analytics.JSONStore.registerNewInstance = function (a, b) {
    var c = CQ_Analytics.JSONStore.getInstance(a, b);
    c.init();
    CQ_Analytics.CCM.register(c);
    return c
};
CQ_Analytics.PersistedJSONPStore = function () {
};
CQ_Analytics.PersistedJSONPStore.prototype = new CQ_Analytics.PersistedJSONStore();
CQ_Analytics.PersistedJSONPStore.prototype.setServiceURL = function (a) {
    this.serviceURL = a
};
CQ_Analytics.PersistedJSONPStore.prototype.getServiceURL = function () {
    return this.serviceURL
};
CQ_Analytics.PersistedJSONPStore.prototype.load = function (d, a, f) {
    var c = this.getName();
    if (!CQ_Analytics.PersistedJSONPStore.JSONPCallbacks[this.getName()]) {
        CQ_Analytics.PersistedJSONPStore.JSONPCallbacks[c] = function (h) {
            var g = CQ_Analytics.CCM.getRegisteredStore(c);
            if (g) {
                g.initJSON(h);
                if (a) {
                    g.initJSON(a, true)
                }
            }
            if (f) {
                f.call(g)
            }
        }
    }
    if (d) {
        this.setServiceURL(d)
    }
    var b = this.serviceURL;
    b = b.replace("${callback}", "CQ_Analytics.PersistedJSONPStore.JSONPCallbacks." + c);
    $CQ.getScript(b)
};
CQ_Analytics.PersistedJSONPStore.JSONPCallbacks = {};
CQ_Analytics.PersistedJSONPStore.getInstance = function (f, g, b, a, d) {
    if (f && g) {
        try {
            var h = new CQ_Analytics.PersistedJSONPStore();
            h.STOREKEY = f.toUpperCase();
            h.STORENAME = f;
            if (g) {
                h.setServiceURL(g)
            }
            if (!a) {
                h.load(g, b, d)
            }
            return h
        } catch (c) {
            console.log("Cannot create the JSONP store", f, g, c)
        }
    }
    return null
};
CQ_Analytics.PersistedJSONPStore.registerNewInstance = function (d, f, b, g) {
    if (!f) {
        return null
    }
    if (!d) {
        var a = CQ.shared.HTTP.getSchemeAndAuthority(f);
        if (a) {
            if (a.indexOf(".") != -1) {
                a = a.substring(0, a.lastIndexOf("."));
                d = a.substring(a.lastIndexOf(".") + 1)
            } else {
                d = a.substring(a.lastIndexOf("/") + 1)
            }
        } else {
            d = f
        }
    }
    var c = CQ_Analytics.PersistedJSONPStore.getInstance(d, f, b, false, function () {
        this.init();
        this.reset();
        if (g) {
            g.call(this)
        }
    });
    if (c != null) {
        CQ_Analytics.CCM.register(c);
        return c
    }
    return null
};
CQ_Analytics.JSONPStore = function () {
};
CQ_Analytics.JSONPStore.prototype = new CQ_Analytics.JSONStore();
CQ_Analytics.JSONPStore.prototype.setServiceURL = function (a) {
    this.serviceURL = a
};
CQ_Analytics.JSONPStore.prototype.getServiceURL = function () {
    return this.serviceURL
};
CQ_Analytics.JSONPStore.prototype.load = function (d, a, f) {
    var c = this.getName();
    if (!CQ_Analytics.JSONPStore.JSONPCallbacks[this.getName()]) {
        CQ_Analytics.JSONPStore.JSONPCallbacks[c] = function (h) {
            var g = CQ_Analytics.CCM.getRegisteredStore(c);
            if (g) {
                g.initJSON(h);
                if (a) {
                    g.initJSON(a, true)
                }
            }
            if (f) {
                f.call(g)
            }
        }
    }
    if (d) {
        this.setServiceURL(d)
    }
    var b = this.serviceURL;
    b = b.replace("${callback}", "CQ_Analytics.JSONPStore.JSONPCallbacks." + c);
    $CQ.getScript(b)
};
CQ_Analytics.JSONPStore.JSONPCallbacks = {};
CQ_Analytics.JSONPStore.getInstance = function (f, g, b, a, d) {
    if (f) {
        try {
            var h = new CQ_Analytics.JSONPStore();
            h.STOREKEY = f.toUpperCase();
            h.STORENAME = f;
            if (g) {
                h.setServiceURL(g);
                if (!a) {
                    h.load(g, b, d)
                }
            }
            return h
        } catch (c) {
            console.log("Cannot create the JSONP store", f, g, c)
        }
    }
    return null
};
CQ_Analytics.JSONPStore.registerNewInstance = function (d, f, b, g) {
    if (!d && f) {
        var a = CQ.shared.HTTP.getSchemeAndAuthority(f);
        if (a) {
            if (a.indexOf(".") != -1) {
                a = a.substring(0, a.lastIndexOf("."));
                d = a.substring(a.lastIndexOf(".") + 1)
            } else {
                d = a.substring(a.lastIndexOf("/") + 1);
                d = d.replace(new RegExp(":", "ig"), "_")
            }
        } else {
            d = f
        }
    }
    var c = CQ_Analytics.JSONPStore.getInstance(d, f, b, false, function () {
        this.init();
        this.reset();
        if (g) {
            g.call(this)
        }
    });
    if (c != null) {
        CQ_Analytics.CCM.register(c);
        return c
    }
    return null
};
CQ_Analytics.storeData = function (f, x) {
    var o = function (p, l) {
        for (var k = 0;
             k < CQ_Analytics.Sitecatalyst.frameworkMappings.length;
             k++) {
            var j = CQ_Analytics.Sitecatalyst.frameworkMappings[k];
            if (j[p] === l) {
                return j
            }
        }
        return null
    };
    var t = function (j) {
        if (typeof j === "string") {
            return j.replace(/[,;=\|]/g, "")
        }
        return j
    };
    for (var w in x) {
        if (w !== "product") {
            var q = w.indexOf(".");
            var s = (q > 0) ? w.substr(0, q - 1) : undefined;
            var y = (q > 0) ? w.substr(q) : w;
            if (s && CQ_Analytics.StoreRegistry.getStore(s)) {
                f = CQ_Analytics.StoreRegistry.getStore(s)
            }
            f.setProperty(y, x[w])
        } else {
            var n = ["category", "sku", "quantity", "price", "events", "evars"];
            var c = f.getProperty("products").split(",");
            c = (c[0] == "") ? new Array() : c;
            var x = (x[w] instanceof Array) ? x[w] : [x[w]];
            for (var m = 0;
                 m < x.length;
                 m++) {
                var r = x[m];
                var b = new Array(6);
                for (var v in r) {
                    var q = n.indexOf(v);
                    if (q > -1) {
                        if (q < 4) {
                            b[q] = t(r[v])
                        } else {
                            var g = [];
                            for (var u in r[v]) {
                                var d = f.getName() + "." + w + "." + v + "." + u;
                                var h = o("cqVar", d);
                                if (h) {
                                    g.push(h.scVar + "=" + t(r[v][u]));
                                    var a = f.getProperty("events").split("\u2026");
                                    if (a.indexOf(h.cqVar) < 0) {
                                        a.push(h.cqVar.replace(/.+\./, ""));
                                        f.setProperty("events", a.join("\u2026"))
                                    }
                                }
                            }
                            b[q] = g.join("|")
                        }
                    }
                }
                c.push(b.join(";"))
            }
            f.setProperty("products", c.join(","))
        }
    }
};
CQ_Analytics.record = function (b) {
    if (b.collect) {
        return [b.event, b.values]
    } else {
        if (b.event) {
            b.options = b.options || {};
            try {
                CQ_Analytics.recordBeforeCallbacks.sort(function (g, f) {
                    return g.rank - f.rank
                });
                for (var d in CQ_Analytics.recordBeforeCallbacks) {
                    if (CQ_Analytics.recordBeforeCallbacks[d].func.call(this, b)) {
                        return
                    }
                }
            } catch (c) {
            }
            var a = b.dataMgr || CQ_Analytics.EventDataMgr;
            a.reset();
            if (typeof b.event == "string") {
                a.setProperty("events", b.event)
            } else {
                a.setProperty("events", b.event.join("\u2026"))
            }
            if (b.values) {
                CQ_Analytics.storeData(a, b.values)
            }
            try {
                CQ_Analytics.recordAfterCallbacks.sort(function (g, f) {
                    return g.rank - f.rank
                });
                for (var d in CQ_Analytics.recordAfterCallbacks) {
                    if (CQ_Analytics.recordAfterCallbacks[d].func.call(this, b)) {
                        return
                    }
                }
            } catch (c) {
            }
        }
    }
};
CQ_Analytics.recordBeforeCallbacks = [];
CQ_Analytics.recordAfterCallbacks = [];
CQ_Analytics.registerBeforeCallback = function (b, a) {
    CQ_Analytics.recordBeforeCallbacks.push({rank: a, func: b})
};
CQ_Analytics.registerAfterCallback = function (b, a) {
    CQ_Analytics.recordAfterCallbacks.push({rank: a, func: b})
};
if (!CQ_Analytics.ClientContext) {
    CQ_Analytics.ClientContext = new function () {
        return {
            get: function (g, c) {
                if (g) {
                    if (g.indexOf("/") != 0) {
                        g = "/" + g
                    }
                    var d = g.split("/")[1];
                    var b = g.substring(g.indexOf("/" + d) + d.length + 2, g.length);
                    var a = CQ_Analytics.CCM.getRegisteredStore(d);
                    if (a) {
                        if (b) {
                            var f = a.getProperty(b);
                            if (f && c) {
                                f = CQ_Analytics.Variables.replaceVariables(f)
                            }
                            return f
                        }
                        return a
                    }
                }
                return null
            }, set: function (f, d) {
                if (f) {
                    if (f.indexOf("/") != 0) {
                        f = "/" + f
                    }
                    var c = f.split("/")[1];
                    var b = f.substring(f.indexOf("/" + c) + c.length + 2, f.length);
                    var a = CQ_Analytics.CCM.getRegisteredStore(c);
                    if (a) {
                        if (b) {
                            a.setProperty(b, d)
                        }
                    }
                }
            }, clear: function () {
                var a = CQ_Analytics.CCM.getStores();
                if (a) {
                    for (var b in a) {
                        if (a[b].clear) {
                            a[b].clear()
                        }
                    }
                }
            }, reset: function () {
                var a = CQ_Analytics.CCM.getStores();
                if (a) {
                    for (var b in a) {
                        if (a[b].reset) {
                            a[b].reset()
                        }
                    }
                }
            }, persist: function (a) {
                CQ_Analytics.ClientContextMgr.ServerStorage.post(a, true)
            }
        }
    }();
    window.ClientContext = CQ_Analytics.ClientContext;
    window.ContextCloud = CQ_Analytics.ClientContext
}
if (CQ_Analytics && !CQ_Analytics.TwitterProfileDataMgr) {
    CQ_Analytics.TwitterProfileDataMgr = function () {
    };
    CQ_Analytics.TwitterProfileDataMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.TwitterProfileDataMgr.prototype.STOREKEY = "TWITTERPROFILEDATA";
    CQ_Analytics.TwitterProfileDataMgr.prototype.STORENAME = "twitterprofile";
    CQ_Analytics.TwitterProfileDataMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.TwitterProfileDataMgr.prototype.init = function () {
        if (!this.data) {
            this.data = {};
            for (var a in this.initProperty) {
                this.data[a] = this.initProperty[a]
            }
        }
    };
    CQ_Analytics.TwitterProfileDataMgr.prototype.getLoaderURL = function () {
        return CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/twitterprofiledata/loader.json")
    };
    CQ_Analytics.TwitterProfileDataMgr.prototype.loadProfile = function (authorizableId) {
        if (authorizableId) {
            CQ_Analytics.TwitterProfileDataMgr.lastUid = authorizableId;
            var url = this.getLoaderURL();
            url = CQ_Analytics.Utils.addParameter(url, "authorizableId", authorizableId);
            try {
                var object = CQ.shared.HTTP.eval(url);
                if (object) {
                    this.data = {};
                    for (var p in object) {
                        this.data[p] = object[p]
                    }
                    this.fireEvent("update");
                    if (CQ_Analytics.ClickstreamcloudEditor) {
                        CQ_Analytics.ClickstreamcloudEditor.reload()
                    }
                    return true
                }
            } catch (error) {
                if (console && console.log) {
                    console.log("Error during profile loading", error)
                }
            }
        }
        return false
    };
    CQ_Analytics.TwitterProfileDataMgr = new CQ_Analytics.TwitterProfileDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.ProfileDataMgr.addListener("update", function () {
            var a = CQ_Analytics.ProfileDataMgr.getProperty("authorizableId");
            if (a != this.lastUid) {
                CQ_Analytics.TwitterProfileDataMgr.loadProfile(a);
                this.fireEvent("update")
            }
        }, CQ_Analytics.TwitterProfileDataMgr);
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.TwitterProfileDataMgr)
}
if (!CQ_Analytics.FacebookProfileDataMgr) {
    CQ_Analytics.FacebookProfileDataMgr = function () {
    };
    CQ_Analytics.FacebookProfileDataMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.FacebookProfileDataMgr.prototype.STOREKEY = "FBPROFILEDATA";
    CQ_Analytics.FacebookProfileDataMgr.prototype.STORENAME = "facebookprofile";
    CQ_Analytics.FacebookProfileDataMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.FacebookProfileDataMgr.prototype.init = function () {
        if (!this.data) {
            this.data = {};
            for (var a in this.initProperty) {
                this.data[a] = this.initProperty[a]
            }
        }
    };
    CQ_Analytics.FacebookProfileDataMgr.prototype.getLoaderURL = function () {
        return CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/fbprofiledata/loader.json")
    };
    CQ_Analytics.FacebookProfileDataMgr.prototype.loadProfile = function (authorizableId) {
        if (authorizableId) {
            CQ_Analytics.FacebookProfileDataMgr.lastUid = authorizableId;
            var url = this.getLoaderURL();
            url = CQ_Analytics.Utils.addParameter(url, "authorizableId", authorizableId);
            try {
                var object = CQ.shared.HTTP.eval(url);
                if (object) {
                    this.data = {};
                    for (var p in object) {
                        this.data[p] = object[p]
                    }
                    this.fireEvent("update");
                    this.fireEvent("checkBirthday");
                    if (CQ_Analytics.ClickstreamcloudEditor) {
                        CQ_Analytics.ClickstreamcloudEditor.reload()
                    }
                    return true
                }
            } catch (error) {
                if (console && console.log) {
                    console.log("Error during profile loading", error)
                }
            }
        }
        return false
    };
    CQ_Analytics.FacebookProfileDataMgr = new CQ_Analytics.FacebookProfileDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.ProfileDataMgr.addListener("update", function () {
            var a = CQ_Analytics.ProfileDataMgr.getProperty("authorizableId");
            if (a != this.lastUid) {
                CQ_Analytics.FacebookProfileDataMgr.loadProfile(a);
                this.fireEvent("update")
            }
        }, CQ_Analytics.FacebookProfileDataMgr);
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.FacebookProfileDataMgr)
}
if (!CQ_Analytics.FacebookInterestsMgr) {
    CQ_Analytics.FacebookInterestsMgr = function () {
    };
    CQ_Analytics.FacebookInterestsMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.FacebookInterestsMgr.prototype.STOREKEY = "FBINTERESTSDATA";
    CQ_Analytics.FacebookInterestsMgr.prototype.STORENAME = "fbinterests";
    CQ_Analytics.FacebookInterestsMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.FacebookInterestsMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.FacebookInterestsMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.FacebookInterestsMgr.prototype.getLoaderURL = function () {
        return CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/fbinterestsdata/loader.json")
    };
    CQ_Analytics.FacebookInterestsMgr.prototype.loadProfile = function (authorizableId) {
        if (authorizableId) {
            var url = this.getLoaderURL();
            url = CQ_Analytics.Utils.addParameter(url, "authorizableId", authorizableId);
            CQ_Analytics.FacebookInterestsMgr.lastUid = authorizableId;
            try {
                var object = CQ.shared.HTTP.eval(url);
                if (object) {
                    this.data = {};
                    for (var p in object) {
                        this.data[p] = object[p]
                    }
                    if (CQ_Analytics.ClickstreamcloudEditor) {
                        CQ_Analytics.ClickstreamcloudEditor.reload()
                    }
                    return true
                }
            } catch (error) {
                if (console && console.log) {
                    console.log("Error during profile loading", error)
                }
            }
        }
        return false
    };
    CQ_Analytics.FacebookInterestsMgr = new CQ_Analytics.FacebookInterestsMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.ProfileDataMgr.addListener("update", function () {
            var a = CQ_Analytics.ProfileDataMgr.getProperty("authorizableId");
            if (a != this.lastUid) {
                CQ_Analytics.FacebookInterestsMgr.loadProfile(a);
                this.fireEvent("update")
            }
        }, CQ_Analytics.FacebookInterestsMgr);
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.FacebookInterestsMgr)
}
if (CQ_Analytics && !CQ_Analytics.SalesforceProfileDataMgr) {
    CQ_Analytics.SalesforceProfileDataMgr = function () {
    };
    CQ_Analytics.SalesforceProfileDataMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.SalesforceProfileDataMgr.prototype.STOREKEY = "SALESFORCEPROFILEDATA";
    CQ_Analytics.SalesforceProfileDataMgr.prototype.STORENAME = "salesforceprofile";
    CQ_Analytics.SalesforceProfileDataMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.SalesforceProfileDataMgr.prototype.init = function () {
        if (!this.data) {
            this.data = {};
            for (var a in this.initProperty) {
                this.data[a] = this.initProperty[a]
            }
        }
    };
    CQ_Analytics.SalesforceProfileDataMgr.prototype.getLoaderURL = function () {
        return CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/salesforceprofiledata/loader.json")
    };
    CQ_Analytics.SalesforceProfileDataMgr.prototype.loadProfile = function (authorizableId) {
        CQ_Analytics.SalesforceProfileDataMgr.lastUid = authorizableId;
        var url = this.getLoaderURL();
        url = CQ_Analytics.Utils.addParameter(url, "authorizableId", authorizableId);
        try {
            var object = CQ.shared.HTTP.eval(url);
            if (object) {
                this.data = {};
                for (var p in object) {
                    this.data[p] = object[p]
                }
                this.fireEvent("update");
                if (CQ_Analytics.ClickstreamcloudEditor) {
                    CQ_Analytics.ClickstreamcloudEditor.reload()
                }
                return true
            }
        } catch (error) {
            if (console && console.log) {
                console.log("Error during profile loading", error)
            }
        }
        return false
    };
    CQ_Analytics.SalesforceProfileDataMgr = new CQ_Analytics.SalesforceProfileDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.SalesforceProfileDataMgr)
}
if (!CQ_Analytics.ViewedProducts) {
    CQ_Analytics.ViewedProducts = function () {
        this.data = null;
        this.MAX_COUNT = 20
    };
    CQ_Analytics.ViewedProducts.prototype = new CQ_Analytics.PersistedSessionStore();
    CQ_Analytics.ViewedProducts.prototype.STOREKEY = "VIEWEDPRODUCTS";
    CQ_Analytics.ViewedProducts.prototype.STORENAME = "viewedproducts";
    CQ_Analytics.ViewedProducts.prototype.record = function (d, f, c, b) {
        if (!this.data) {
            this.init()
        }
        for (var a = 0;
             a < this.data.length;
             a++) {
            if (this.data[a].path == d) {
                this.data.splice(a, 1);
                break
            }
        }
        if (this.data.length == this.MAX_COUNT) {
            this.data.shift()
        }
        this.data.push({path: d, title: f, image: c, price: b});
        this.persist();
        this.fireEvent("update")
    };
    CQ_Analytics.ViewedProducts.prototype.mostRecent = function () {
        if (!this.data) {
            this.init()
        }
        if (this.data.length > 0) {
            return this.data[this.data.length - 1]
        } else {
            return null
        }
    };
    CQ_Analytics.ViewedProducts.prototype.mostRecentNotInCart = function () {
        if (!this.data) {
            this.init()
        }
        if (!CQ_Analytics.CartMgr) {
            return this.mostRecent()
        }
        for (var a = this.data.length - 1;
             a >= 0;
             a--) {
            var b = this.data[a];
            if (!CQ_Analytics.CartHelper.containsProduct(CQ_Analytics.CartMgr.getData(), b.path, 1)) {
                return b
            }
        }
        return null
    };
    CQ_Analytics.ViewedProducts.prototype.recent = function (f, b) {
        var a = [];
        if (!this.data) {
            this.init()
        }
        if (!CQ_Analytics.CartMgr) {
            b = false
        }
        for (var c = this.data.length - 1;
             c >= 0 && f > 0;
             c--) {
            var d = this.data[c];
            if (b && CQ_Analytics.CartHelper.containsProduct(CQ_Analytics.CartMgr.getData(), d.path, 1)) {
                continue
            }
            a.push(d);
            f--
        }
        return a
    };
    CQ_Analytics.ViewedProducts.prototype.getData = function (a) {
        if (!this.data) {
            this.init()
        }
        return this.data
    };
    CQ_Analytics.ViewedProducts.prototype.init = function () {
        var b = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        var d = b.get(this.getStoreKey());
        d = d === null ? "" : new String(d);
        var f = d.split(";");
        this.data = [];
        for (var c = 0;
             c < f.length;
             c++) {
            var a = f[c].split(",");
            if (a.length >= 4) {
                this.data.push({path: a[0], title: a[1], image: a[2], price: a[3]})
            } else {
                if (a.length >= 3) {
                    this.data.push({path: a[0], title: a[1], image: a[2], price: undefined})
                }
            }
        }
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.ViewedProducts.prototype.persist = function () {
        if (this.fireEvent("beforepersist") !== false) {
            var b = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
            var f = [];
            for (var c = 0;
                 c < this.data.length;
                 c++) {
                var d = this.data[c];
                var a = d.path + "," + d.title + "," + d.image;
                if (d.price) {
                    a += "," + d.price
                }
                f.push(a)
            }
            b.set(this.getStoreKey(), f.join(";"));
            this.fireEvent("persist")
        }
    };
    CQ_Analytics.ViewedProducts.prototype.reset = function () {
        this.clear();
        this.fireEvent("update")
    };
    CQ_Analytics.ViewedProducts.prototype.clear = function () {
        var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        a.remove(this.getStoreKey());
        this.data = []
    };
    CQ_Analytics.ViewedProducts = new CQ_Analytics.ViewedProducts();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.ViewedProducts)
}
if (!CQ_Analytics.TagCloudMgr) {
    CQ_Analytics.TagCloudMgr = function () {
        this.data = null;
        this.addedTags = {};
        this.frequencies = null;
        this.initialTags = null;
        this.initialAddedTags = {};
        this.copyObject = function (c) {
            var b = {};
            for (var a in c) {
                b[a] = c[a]
            }
            return b
        }
    };
    CQ_Analytics.TagCloudMgr.prototype = new CQ_Analytics.PersistedSessionStore();
    CQ_Analytics.TagCloudMgr.prototype.STOREKEY = "TAGCLOUD";
    CQ_Analytics.TagCloudMgr.prototype.STORENAME = "tagcloud";
    CQ_Analytics.TagCloudMgr.prototype.parseTagList = function (a) {
        var c = {};
        var b = a.split(",");
        for (var d in b) {
            if (b.hasOwnProperty(d)) {
                var f = b[d].split("=");
                if (f.length == 2) {
                    c[f[0]] = parseInt(f[1])
                }
            }
        }
        return c
    };
    CQ_Analytics.TagCloudMgr.prototype.parseString = function (a) {
        this.data = this.parseTagList(a);
        return this
    };
    CQ_Analytics.TagCloudMgr.prototype.add = function (a) {
        this.addedTags[a] = true;
        this.data[a] = (this.data[a] || 0) + 1
    };
    CQ_Analytics.TagCloudMgr.prototype.each = function (b) {
        for (var a in this.data) {
            if (this.data.hasOwnProperty(a)) {
                b(a, this.data[a])
            }
        }
    };
    CQ_Analytics.TagCloudMgr.prototype.calculateFrequencies = function () {
        var c = {};
        var a = [];
        this.each(function (d, f) {
            if (!c[f]) {
                a.push(f)
            }
            c[f] = true
        });
        a.sort(function b(f, d) {
            if (f > d) {
                return 1
            }
            if (f < d) {
                return -1
            }
            return 0
        });
        return a
    };
    CQ_Analytics.TagCloudMgr.prototype.calculateNtile = function (b, c) {
        if (this.frequencies === null) {
            this.frequencies = this.calculateFrequencies()
        }
        var a = 0;
        while (true) {
            if ((a >= (this.frequencies.length - 1)) || (this.frequencies[a] >= b)) {
                return Math.ceil((a + 1) / this.frequencies.length * c)
            }
            a++
        }
    };
    CQ_Analytics.TagCloudMgr.prototype.getTags = function () {
        return this.data
    };
    CQ_Analytics.TagCloudMgr.prototype.getData = function (a) {
        return this.getTags()
    };
    CQ_Analytics.TagCloudMgr.prototype.getTag = function (a) {
        return this.data[a] > 0 ? this.data[a] : 0
    };
    CQ_Analytics.TagCloudMgr.prototype.init = function (a) {
        var b = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        var d = b.get(this.getStoreKey());
        d = d === null ? "" : new String(d);
        this.data = this.parseTagList(d);
        if (a) {
            for (var c in a) {
                if (a.hasOwnProperty(c)) {
                    this.add(a[c])
                }
            }
        }
        this.initialTags = this.copyObject(this.data);
        this.initialAddedTags = this.copyObject(this.addedTags);
        this.persist();
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.TagCloudMgr.prototype.setProperty = function (a, b) {
        if (this.data == null) {
            this.init()
        }
        if (b > 0) {
            this.addedTags[a] = true;
            this.data[a] = b > 0 ? b : 0
        } else {
            delete this.addedTags[a];
            delete this.data[a]
        }
        this.persist();
        this.fireEvent("update")
    };
    CQ_Analytics.TagCloudMgr.prototype.reset = function () {
        this.clear();
        this.fireEvent("update")
    };
    CQ_Analytics.TagCloudMgr.prototype.getProperty = function (a) {
        if (this.data == null) {
            this.init()
        }
        return this.data[a] > 0 ? this.data[a] : 0
    };
    CQ_Analytics.TagCloudMgr.prototype.removeProperty = function (a) {
        if (this.data == null) {
            this.init()
        }
        this.setProperty(a, 0)
    };
    CQ_Analytics.TagCloudMgr.prototype.clear = function () {
        var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        a.remove(this.getStoreKey());
        this.addedTags = {};
        this.data = {}
    };
    CQ_Analytics.TagCloudMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.TagCloudMgr.prototype.getLabel = function (b) {
        if (b) {
            var c = b.split(":");
            var a = c[c.length - 1].split("/");
            b = a[a.length - 1]
        }
        return b
    };
    CQ_Analytics.TagCloudMgr = new CQ_Analytics.TagCloudMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.TagCloudMgr)
}
if (!CQ_Analytics.SurferInfoMgr) {
    CQ_Analytics.SurferInfoMgr = function () {
    };
    CQ_Analytics.SurferInfoMgr.prototype = new CQ_Analytics.SessionStore();
    CQ_Analytics.SurferInfoMgr.prototype.STOREKEY = "SURFERINFO";
    CQ_Analytics.SurferInfoMgr.prototype.STORENAME = "surferinfo";
    CQ_Analytics.SurferInfoMgr.prototype.init = function () {
        this.data = {};
        for (var a in this.initProperty) {
            this.data[a] = this.initProperty[a]
        }
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.SurferInfoMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.SurferInfoMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.SurferInfoMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.SurferInfoMgr = new CQ_Analytics.SurferInfoMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        var b = CQ_Analytics.BrowserInfoInstance;
        this.addInitProperty("browserFamily", b.getBrowserFamily());
        this.addInitProperty("browserVersion", b.getBrowserVersion());
        this.addInitProperty("browser", "${/surferinfo/browserFamily} ${/surferinfo/browserVersion}");
        this.addInitProperty("OS", b.getOSName());
        this.addInitProperty("resolution", b.getScreenResolution());
        this.addInitProperty("device", b.getDeviceType());
        this.addInitProperty("isMobile", b.isMobile());
        this.addInitProperty("userAgent", b.getUserAgent());
        var a = new Date();
        this.addInitProperty("day", a.getDate());
        this.addInitProperty("month", a.getMonth() + 1);
        this.addInitProperty("year", a.getFullYear());
        this.addInitProperty("hours", a.getHours());
        this.addInitProperty("minutes", a.getMinutes());
        var c = "${/surferinfo/browserFamily}";
        if (b.isMobile()) {
            c = "${/surferinfo/device}"
        }
        this.addInitProperty("image", c);
        var d = CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/surferinfo/resources/${/surferinfo/image}.png");
        this.addInitProperty("thumbnail", d);
        if (CQ_Analytics.MousePositionMgr) {
            CQ_Analytics.MousePositionMgr.addListener("update", function () {
                this.setProperty("mouse X", CQ_Analytics.MousePositionMgr.getProperty("x"));
                this.setProperty("mouse Y", CQ_Analytics.MousePositionMgr.getProperty("y"))
            }, this)
        }
        this.addListener("update", function () {
            var g = this.getProperty("device");
            var h = "${/surferinfo/browserFamily}";
            if (b.isMobile(g)) {
                h = "${/surferinfo/device}"
            }
            var f = this.getProperty("image");
            if (f != h) {
                this.setProperty("image", h)
            }
        }, this);
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.SurferInfoMgr)
}
if (!CQ_Analytics.SocialGraphMgr) {
    CQ_Analytics.SocialGraphMgr = CQ_Analytics.JSONPStore.registerNewInstance("socialgraph");
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this);
        CQ_Analytics.ProfileDataMgr.addListener("update", function () {
            var a = CQ_Analytics.ProfileDataMgr.getProperty("authorizableId");
            if (a != this.lastUid) {
                this.fireEvent("update")
            }
        }, CQ_Analytics.SocialGraphMgr)
    }, CQ_Analytics.SocialGraphMgr)
}
if (CQ_Analytics.SegmentMgr && !CQ_Analytics.SegmentMgr.isResolvedRegistered) {
    CQ_Analytics.SegmentMgr.isResolvedRegistered = true;
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.StoreRegistry.register(CQ_Analytics.SegmentMgr);
        CQ_Analytics.CCM.fireEvent("storeregister", CQ_Analytics.SegmentMgr)
    }, CQ_Analytics.SegmentMgr)
}
if (!CQ_Analytics.ProfileDataMgr) {
    CQ_Analytics.ProfileDataMgr = function () {
        this.addListener("beforepersist", function () {
            this.checkAuthorizableId()
        }, this)
    };
    CQ_Analytics.ProfileDataMgr.prototype = new CQ_Analytics.PersistedSessionStore();
    CQ_Analytics.ProfileDataMgr.prototype.STOREKEY = "PROFILEDATA";
    CQ_Analytics.ProfileDataMgr.prototype.STORENAME = "profile";
    CQ_Analytics.ProfileDataMgr.prototype.LOADER_PATH = CQ_Analytics.Utils.externalize("/libs/cq/personalization/components/profileloader/content/load.js", true);
    CQ_Analytics.ProfileDataMgr.prototype.PROFILE_LOADER = CQ_Analytics.Utils.externalize("/libs/cq/personalization/components/profileloader/content/load.json", true);
    CQ_Analytics.ProfileDataMgr.prototype.init = function () {
        this.persistence = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        $CQ(CQ.shared.ClientSidePersistence).bind(CQ.shared.ClientSidePersistence.EVENT_NAME, function (d, g) {
            if (!g) {
                return
            }
            if (((g.key === "CLIENTCONTEXT") || (g.key === "PROFILEDATA")) && (g.mode != CQ.shared.ClientSidePersistence.MODE_COOKIE.name)) {
                var c = new CQ.shared.ClientSidePersistence({
                    container: "",
                    mode: CQ.shared.ClientSidePersistence.MODE_COOKIE
                });
                var f = c.get(g.key);
                if (g.key === "PROFILEDATA" && (!f || f == "") && g.action != "set") {
                    CQ.shared.ClientSidePersistence.clearAllMaps()
                }
                c.set(g.key, g.value)
            }
        });
        var a = this.persistence.get(this.getStoreKey());
        if (!a || a == "") {
            this.data = {};
            for (var b in this.initProperty) {
                this.data[b] = this.initProperty[b]
            }
        } else {
            this.data = this.parse(a)
        }
        this.persist();
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.ProfileDataMgr.prototype.checkAuthorizableId = function () {
        if (!this.data) {
            this.init()
        }
        if (this.data.authorizableId) {
            CQ_Analytics.CCM.setVisitorId(this.data.authorizableId)
        } else {
            CQ_Analytics.CCM.setVisitorId("")
        }
    };
    CQ_Analytics.ProfileDataMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.ProfileDataMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.ProfileDataMgr.prototype.clear = function () {
        if (this.persistence) {
            this.persistence.remove(this.getStoreKey())
        }
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.ProfileDataMgr.prototype.getLoaderURL = function () {
        return CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/profiledata/loader.json")
    };
    CQ_Analytics.ProfileDataMgr.prototype.loadProfile = function (authorizableId) {
        var url = this.getLoaderURL();
        url = CQ_Analytics.Utils.addParameter(url, "authorizableId", authorizableId);
        try {
            var object = CQ.shared.HTTP.eval(url);
            if (object) {
                this.data = {};
                for (var p in object) {
                    this.data[p] = object[p]
                }
                this.persist();
                this.fireEvent("initialize", this);
                this.fireEvent("update");
                if (CQ_Analytics.ClickstreamcloudEditor) {
                    CQ_Analytics.ClickstreamcloudEditor.reload()
                }
                return true
            }
        } catch (error) {
            if (console && console.log) {
                console.log("Error during profile loading", error)
            }
        }
        return false
    };
    CQ_Analytics.ProfileDataMgr = new CQ_Analytics.ProfileDataMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        this.checkAuthorizableId();
        this.addListener("update", function (a, k) {
            if (k == "birthday" || !k) {
                var l = this.getProperty("birthday");
                var m = this.getProperty("age");
                var h = "";
                if (l) {
                    try {
                        var c = function (p, o) {
                            var n = new Date(o.getTime());
                            n.setUTCHours(p.getUTCHours(), p.getUTCMinutes(), p.getUTCSeconds(), p.getUTCMilliseconds());
                            var q = n.getTime() - p.getTime();
                            return q / (1000 * 60 * 60 * 24)
                        };
                        var d = function (n) {
                            var o = new Date(n.getFullYear(), 0, 0);
                            return c(n, o) * -1
                        };
                        var j = new Date(Date.parse(l));
                        if (!isNaN(j.getTime())) {
                            var g = new Date();
                            if (d(j) == d(g) && j.getMonth() == g.getMonth()) {
                                h = CQ.shared.HTTP.externalize(CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/profiledata/resources/birthday_cake.png"))
                            } else {
                                var b = g.getFullYear() - j.getFullYear();
                                if (d(j) > d(g)) {
                                    h = b
                                } else {
                                    h = Math.max(0, b - 1)
                                }
                            }
                        } else {
                            h = ""
                        }
                    } catch (f) {
                        h = ""
                    }
                }
                if (m != h) {
                    this.setProperty("age", h)
                }
            }
        });
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.ProfileDataMgr)
}
if (!CQ_Analytics.GeolocationUtils) {
    CQ_Analytics.GeolocationUtils = new function () {
        return {
            init: function (b) {
                var d;
                try {
                    if (typeof navigator.geolocation === "undefined") {
                        d = google.gears.factory.create("beta.geolocation")
                    } else {
                        d = navigator.geolocation
                    }
                } catch (f) {
                }
                var a = function (g) {
                    var h = CQ_Analytics.PersistedJSONStore.registerNewInstance(b, g);
                    h.addListener("update", function (j, l) {
                        var m = CQ_Analytics.ClientContext.get(b + "/latitude");
                        var k = CQ_Analytics.ClientContext.get(b + "/longitude");
                        if (!m || !k) {
                            if (l != "generatedThumbnail") {
                                h.setProperty("generatedThumbnail", CQ_Analytics.GeolocationUtils.THUMBNAILS.fallback)
                            } else {
                                if (h.getProperty(l, true) != CQ_Analytics.GeolocationUtils.THUMBNAILS.fallback) {
                                    h.setProperty(l, CQ_Analytics.GeolocationUtils.THUMBNAILS.fallback)
                                }
                            }
                        } else {
                            if (h.getProperty("generatedThumbnail", true) == CQ_Analytics.GeolocationUtils.THUMBNAILS.fallback) {
                                h.setProperty("generatedThumbnail", h.getInitProperty("generatedThumbnail"))
                            }
                            if (l == "latitude" || l == "longitude" || !l) {
                                CQ_Analytics.GeolocationUtils.computeAddress(m, k, b)
                            }
                        }
                    })
                };
                var c = function (k, j) {
                    var h = CQ_Analytics.StoreRegistry.getStore(b);
                    if (h) {
                        k = k || CQ_Analytics.GeolocationUtils.DEFAULTS;
                        var g = k.generatedThumbnail = h.getInitProperty("generatedThumbnail");
                        h.initJSON(k);
                        if (!j) {
                            h.init();
                            h.setProperty("generatedThumbnail", g)
                        }
                    } else {
                        a(k)
                    }
                };
                a();
                if (d) {
                    d.getCurrentPosition(function (g) {
                        var h = {longitude: g.coords.longitude, latitude: g.coords.latitude};
                        if (g.address) {
                            h.address = g.address
                        }
                        c(h, CQ_Analytics.CCM.areStoresInitialized)
                    }, function (g) {
                        if (!CQ_Analytics.CCM.areStoresInitialized) {
                            var j = "Error";
                            if (CQ_Analytics.isUIAvailable) {
                                j = CQ.I18n.getMessage("Connection timeout", null, "timeout while connecting geolocation service");
                                if (g.code == 1) {
                                    j = CQ.I18n.getMessage("Permission denied", null, "permission denied message from goelocation service")
                                } else {
                                    if (g.code == 2) {
                                        j = CQ.I18n.getMessage("Position unavailable", null, "geolocation service couldn't find location")
                                    }
                                }
                            }
                            var h = {address: {country: j}};
                            c(h, CQ_Analytics.CCM.areStoresInitialized)
                        }
                    })
                } else {
                    c()
                }
            }, computeAddress: function (d, b, a) {
                CQ_Analytics.ClientContext.set(a + "/address/region");
                CQ_Analytics.ClientContext.set(a + "/address/countryCode");
                CQ_Analytics.ClientContext.set(a + "/address/country");
                var c = function () {
                    var f = new google.maps.LatLng(d, b);
                    var g = new google.maps.Geocoder();
                    g.geocode({location: f}, function (h, k) {
                        if (k === "OK" && h[0] && h[0].address_components) {
                            for (var l = 0;
                                 l < h[0].address_components.length;
                                 l++) {
                                var j = h[0].address_components[l];
                                if (j.types && j.types.length) {
                                    if (j.types[0] == "administrative_area_level_1") {
                                        CQ_Analytics.ClientContext.set(a + "/address/region", j.short_name)
                                    } else {
                                        if (j.types[0] == "country") {
                                            CQ_Analytics.ClientContext.set(a + "/address/countryCode", j.short_name);
                                            CQ_Analytics.ClientContext.set(a + "/address/country", j.long_name)
                                        }
                                    }
                                }
                            }
                        }
                    })
                };
                if (!window.google) {
                    window.geocode_callback = c;
                    $CQ.getScript(document.location.protocol + "//maps.google.com/maps/api/js?sensor=false&callback=geocode_callback")
                } else {
                    c.call()
                }
            }
        }
    }();
    CQ_Analytics.GeolocationUtils.DEFAULTS = {latitude: 37.331375, longitude: -121.893992};
    CQ_Analytics.GeolocationUtils.THUMBNAILS = {fallback: document.location.protocol + "//maps.googleapis.com/maps/api/staticmap?center=37,-121&zoom=0&size=80x80&sensor=false"}
}
if (!CQ_Analytics.CartMgr) {
    CQ_Analytics.CartMgr = new CQ_Analytics.SessionStore();
    CQ_Analytics.CartMgr.STOREKEY = "CART";
    CQ_Analytics.CartMgr.STORENAME = "cart";
    CQ_Analytics.CartMgr.init = function () {
        if (!this.data) {
            this.data = {}
        } else {
            var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
            var b = a.get(this.STOREKEY);
            if (b) {
                var c = b.split("=");
                if (c.length >= 2) {
                    this.referenceTotalPrice = c[0];
                    this.simulatedTotalPrice = c[1];
                    this.updateSimulatedPrice()
                }
            }
            this.initialized = true;
            this.fireEvent("initialize", this);
            this.fireEvent("update")
        }
    };
    CQ_Analytics.CartMgr.persist = function () {
        if (this.fireEvent("beforepersist") !== false) {
            var a = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
            var b = null;
            if (this.referenceTotalPrice && this.simulatedTotalPrice) {
                b = this.referenceTotalPrice + "=" + this.simulatedTotalPrice
            }
            a.set(this.STOREKEY, b);
            this.fireEvent("persist")
        }
    };
    CQ_Analytics.CartMgr.updateSimulatedPrice = function () {
        if (this.simulatedTotalPrice && this.referenceTotalPrice == this.data.totalPriceFloat) {
            this.data.totalPrice = this.simulatedTotalPrice + "";
            this.data.totalPriceFloat = this.simulatedTotalPrice
        } else {
            this.simulatedTotalPrice = null;
            this.persist()
        }
    };
    CQ_Analytics.CartMgr.registerSimulatedPrice = function (a) {
        if (this.simulatedTotalPrice) {
            this.simulatedTotalPrice = a;
            this.data.totalPrice = a + ""
        } else {
            this.referenceTotalPrice = this.data.totalPriceFloat;
            this.simulatedTotalPrice = a
        }
        this.persist()
    };
    CQ_Analytics.CartMgr.getProperty = function (a, k) {
        if (!this.data) {
            this.init()
        }
        var f = this.data;
        try {
            var d = a.split(".");
            for (var g = 0;
                 g < d.length - 1;
                 g++) {
                var b = d[g];
                var c = b.indexOf("[");
                var h = -1;
                if (c > 0) {
                    h = parseInt(b.substring(c + 1, b.length - 1));
                    b = b.substring(0, c)
                }
                f = f[b];
                if (h >= 0) {
                    f = f[h]
                }
            }
            var m = d[d.length - 1];
            if (!k) {
                var l = CQ.shared.XSS.getXSSPropertyName(m);
                if (f[l]) {
                    return f[l]
                }
            }
            return f[m]
        } catch (j) {
            return undefined
        }
    };
    CQ_Analytics.CartMgr.validate = function (a, c) {
        if (a == "totalPriceFloat") {
            var b = parseFloat(c);
            return b >= 0
        } else {
            if (a.indexOf(".quantity") > 0) {
                var d = parseInt(c);
                return d >= 0
            }
        }
        return true
    };
    CQ_Analytics.CartMgr.setProperty = function (a, j) {
        if (!this.data) {
            this.init()
        }
        if (!this.validate(a, j)) {
            this.fireEvent("update", a);
            return
        }
        if (a == "totalPriceFloat") {
            this.registerSimulatedPrice(j)
        }
        var f = this.data;
        var d = a.split(".");
        for (var g = 0;
             g < d.length - 1;
             g++) {
            var b = d[g];
            var c = b.indexOf("[");
            var h = -1;
            if (c > 0) {
                h = parseInt(b.substring(c + 1, b.length - 1));
                b = b.substring(0, c)
            }
            if (!f[b]) {
                f[b] = {}
            }
            f = f[b];
            if (h >= 0) {
                if (!f[h]) {
                    f[h] = {}
                }
                f = f[h]
            }
        }
        var l = d[d.length - 1];
        f[l] = j;
        var k = CQ.shared.XSS.getXSSPropertyName(l);
        this.data[k] = CQ.shared.XSS.getXSSValue(j);
        this.fireEvent("update", a)
    };
    CQ_Analytics.CartMgr.update = function () {
        var a = this;
        if (this.updateUrl) {
            $CQ.ajax({
                url: this.updateUrl,
                type: "POST",
                data: {cart: JSON.stringify(a.data)},
                externalize: false,
                encodePath: false,
                hook: true,
                success: function (b) {
                    a.data = b;
                    a.updateSimulatedPrice();
                    CQ_Analytics.ClientContextUtils.renderStore(CQ_Analytics.CartMgr.divId, CQ_Analytics.CartMgr.STORENAME);
                    a.fireEvent("updatecomplete");
                    a.fireEvent("update")
                }
            })
        }
    };
    CQ_Analytics.CartMgr.clear = function () {
        if (this.data.entries) {
            this.data.entries = []
        }
        if (this.data.vouchers) {
            this.data.vouchers = []
        }
        this.data.totalPrice = "0";
        this.referenceTotalPrice = null;
        this.simulatedTotalPrice = null
    };
    CQ_Analytics.CartMgr.reset = function () {
        this.clear();
        this.fireEvent("update");
        this.persist();
        this.update()
    };
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this);
        CQ_Analytics.SegmentMgr.addListener("update", function () {
            if (!this.promotionsMap) {
                return
            }
            if (!this.data.promotions) {
                this.data.promotions = []
            }
            var g = CQ_Analytics.SegmentMgr.getResolved();
            var f = [];
            for (var d = 0;
                 d < this.promotionsMap.length;
                 d++) {
                var a = this.promotionsMap[d];
                var k = false;
                var h = a.segments.split(",");
                for (var b = 0;
                     b < h.length;
                     b++) {
                    if ($CQ.inArray(h[b], g) >= 0) {
                        k = true;
                        break
                    }
                }
                if (k) {
                    f.push(a.path)
                }
            }
            var c = false;
            for (var d = 0;
                 d < this.data.promotions.length;
                 d++) {
                var l = this.data.promotions[d];
                var b = $CQ.inArray(l.path, f);
                if (b >= 0) {
                    f.splice(b, 1)
                } else {
                    this.data.promotions.splice(d--, 1);
                    c = true
                }
            }
            for (var d = 0;
                 d < f.length;
                 d++) {
                var l = {path: f[d]};
                this.data.promotions.push(l);
                c = true
            }
            if (c) {
                this.update()
            }
        }, CQ_Analytics.CartMgr)
    }, CQ_Analytics.CartMgr)
}
if (!CQ_Analytics.CartHelper) {
    CQ_Analytics.CartHelper = (function () {
        return {
            containsProduct: function (f, d, g) {
                var h = d ? d.substring(0, d.lastIndexOf("#")) : null;
                for (var a = 0;
                     f.entries && a < f.entries.length;
                     a++) {
                    var c = f.entries[a];
                    var b = c.page.substring(0, c.page.lastIndexOf("#"));
                    if ((!d || b == h) && (!g || c.quantity >= g)) {
                        return true
                    }
                }
                return false
            }
        }
    })()
}
if (!CQ_Analytics.CampaignMgr) {
    CQ_Analytics.CampaignMgr = function () {
    };
    CQ_Analytics.CampaignMgr.prototype = new CQ_Analytics.PersistedSessionStore();
    CQ_Analytics.CampaignMgr.prototype.STOREKEY = "CAMPAIGN";
    CQ_Analytics.CampaignMgr.prototype.STORENAME = "campaign";
    CQ_Analytics.CampaignMgr.prototype.DEFAULT_EXPERIENCE = "DEFAULT";
    CQ_Analytics.CampaignMgr.prototype.init = function () {
        var c;
        this.persistence = new CQ_Analytics.SessionPersistence({container: "ClientContext"});
        var a = this.persistence.get(this.getStoreKey());
        if (!this.data) {
            this.data = {}
        }
        if (!a || a === "") {
            for (c in this.initProperty) {
                if (this.initProperty.hasOwnProperty(c)) {
                    this.data[c] = this.initProperty[c]
                }
            }
        } else {
            this.data = this.parse(a);
            var b = this.getInitProperty("campaigns");
            if (b) {
                this.data.campaigns = b
            }
        }
        this.validate();
        this.persist();
        this.initialized = true;
        this.fireEvent("initialize", this);
        this.fireEvent("update")
    };
    CQ_Analytics.CampaignMgr.prototype.validate = function () {
        if (this.data.campaigns) {
            if (!this.getCampaignBy("path", this.data.path) && !this.getCampaignBy("id", this.data.id)) {
                this.setCampaign(null)
            }
            if (this.data["recipe/path"] !== CQ_Analytics.CampaignMgr.DEFAULT_EXPERIENCE) {
                if (!this.getExperienceBy("path", this.data["recipe/path"]) && !this.getExperienceBy("id", this.data["recipe/id"])) {
                    this.setExperience(null)
                }
            }
        }
    };
    CQ_Analytics.CampaignMgr.prototype.getCampaignBy = function (f, b) {
        if (!this.data || !this.data.campaigns) {
            return null
        }
        var a, c = this.data.campaigns;
        for (a = 0;
             a < c.length;
             a++) {
            var d = c[a];
            if (d[f] === b) {
                return d
            }
        }
        return null
    };
    CQ_Analytics.CampaignMgr.prototype.getExperienceBy = function (h, d) {
        if (!this.data || !this.data.campaigns) {
            return null
        }
        var c, f = this.data.campaigns;
        for (c = 0;
             c < f.length;
             c++) {
            var g = f[c];
            for (var a = 0;
                 a < g.experiences.length;
                 a++) {
                var b = g.experiences[a];
                if (b[h] === d) {
                    return b
                }
            }
        }
        return null
    };
    CQ_Analytics.CampaignMgr.prototype.setCampaign = function (a) {
        this.setProperties({
            name: a ? a.title : "",
            path: a ? a.path : "",
            id: a ? a.id : "",
            "recipe/name": a ? CQ.I18n.getMessage("(default)") : "",
            "recipe/path": a ? this.DEFAULT_EXPERIENCE : "",
            "recipe/id": a ? this.DEFAULT_EXPERIENCE : ""
        })
    };
    CQ_Analytics.CampaignMgr.prototype.setExperience = function (a) {
        this.setProperties({
            "recipe/name": a ? a.title : "",
            "recipe/path": a ? a.path : "",
            "recipe/id": a ? a.id : ""
        })
    };
    CQ_Analytics.CampaignMgr.prototype.setProperty = function (a, b) {
        if (a === "id" || a === "path") {
            this.setCampaign(this.getCampaignBy(a, b));
            return
        } else {
            if (a === "recipe/id" || a === "recipe/path") {
                if (b !== CQ_Analytics.CampaignMgr.DEFAULT_EXPERIENCE) {
                    this.setExperience(this.getExperienceBy(a.substring("recipe/".length), b));
                    return
                }
            }
        }
        CQ_Analytics.PersistedSessionStore.prototype.setProperty.call(this, a, b)
    };
    CQ_Analytics.CampaignMgr.prototype.isCampaignSelected = function () {
        return this.getProperty("path") !== ""
    };
    CQ_Analytics.CampaignMgr.prototype.clear = function () {
        this.data = null;
        this.initProperty = {}
    };
    CQ_Analytics.CampaignMgr.prototype.getLabel = function (a) {
        return a
    };
    CQ_Analytics.CampaignMgr.prototype.getLink = function (a) {
        return ""
    };
    CQ_Analytics.CampaignMgr = new CQ_Analytics.CampaignMgr();
    CQ_Analytics.CCM.addListener("configloaded", function () {
        CQ_Analytics.CCM.register(this)
    }, CQ_Analytics.CampaignMgr)
}
if (!CQ_Analytics.ActivityStreamMgr) {
    CQ_Analytics.ActivityStreamMgr = CQ_Analytics.JSONStore.registerNewInstance("activitystream", {});
    CQ_Analytics.ActivityStreamMgr.internalRenderer = function (c, a) {
        var b = c + ".form.html";
        b += CQ_Analytics.ClientContextMgr.getClientContextURL("/contextstores/activitystream.html");
        b += "?limit=3";
        CQ.shared.HTTP.get(b, function (f, g, d) {
            $CQ("#" + a).children().remove();
            if (g) {
                $CQ("#" + a).append(d.body)
            }
        })
    };
    CQ_Analytics.ActivityStreamMgr.renderer = function (b, a) {
        if (!b.isReady) {
            b.isReady = true;
            CQ_Analytics.ClientContextUtils.onStoreRegistered("profile", function (c) {
                c.addListener("update", function (f, g) {
                    var h = this.getProperty("path");
                    if (h != CQ_Analytics.ActivityStreamMgr.currentProfilePath) {
                        CQ_Analytics.ActivityStreamMgr.currentProfilePath = h;
                        CQ_Analytics.ActivityStreamMgr.internalRenderer(h, a)
                    }
                }, c);
                var d = c.getProperty("path");
                CQ_Analytics.ActivityStreamMgr.currentProfilePath = d;
                CQ_Analytics.ActivityStreamMgr.internalRenderer(d, a)
            })
        }
        return ""
    }
}
(function (g) {
    function d() {
    }

    function x(H) {
        c = [H]
    }

    function q(J, H, I) {
        return J && J.apply(H.context || H, I)
    }

    function p(H) {
        return /\?/.test(H) ? "&" : "?"
    }

    var r = "async", v = "charset", t = "", F = "error", w = "insertBefore", u = "_jqjsp", C = "on", h = C + "click", m = C + F, s = C + "load", A = C + "readystatechange", b = "readyState", E = "removeChild", l = "<script>", B = "success", D = "timeout", f = window, a = g.Deferred, j = g("head")[0] || document.documentElement, z = {}, o = 0, c, n = {
        callback: u,
        url: location.href
    }, y = f.opera, k = !!g("<div>").html("<!--[if IE]><i><![endif]-->").find("i").length;

    function G(M) {
        M = g.extend({}, n, M);
        var K = M.success, R = M.error, J = M.complete, aa = M.dataFilter, ac = M.callbackParameter, S = M.callback, ab = M.cache, I = M.pageCache, L = M.charset, N = M.url, ae = M.data, U = M.timeout, Q, Y = 0, W = d, T, P, H, ad, O, X;
        a && a(function (af) {
            af.done(K).fail(R);
            K = af.resolve;
            R = af.reject
        }).promise(M);
        M.abort = function () {
            !(Y++) && W()
        };
        if (q(M.beforeSend, M, [M]) === !1 || Y) {
            return M
        }
        N = N || t;
        ae = ae ? ((typeof ae) == "string" ? ae : g.param(ae, M.traditional)) : t;
        N += ae ? (p(N) + ae) : t;
        ac && (N += p(N) + encodeURIComponent(ac) + "=?");
        !ab && !I && (N += p(N) + "_" + (new Date()).getTime() + "=");
        N = N.replace(/=\?(&|$)/, "=" + S + "$1");
        function Z(af) {
            if (!(Y++)) {
                W();
                I && (z[N] = {s: [af]});
                aa && (af = aa.apply(M, [af]));
                q(K, M, [af, B, M]);
                q(J, M, [M, B])
            }
        }

        function V(af) {
            if (!(Y++)) {
                W();
                I && af != D && (z[N] = af);
                q(R, M, [M, af]);
                q(J, M, [M, af])
            }
        }

        if (I && (Q = z[N])) {
            Q.s ? Z(Q.s[0]) : V(Q)
        } else {
            f[S] = x;
            ad = g(l)[0];
            ad.id = u + o++;
            if (L) {
                ad[v] = L
            }
            y && y.version() < 11.6 ? ((O = g(l)[0]).text = "document.getElementById('" + ad.id + "')." + m + "()") : (ad[r] = r);
            if (k) {
                ad.htmlFor = ad.id;
                ad.event = h
            }
            ad[s] = ad[m] = ad[A] = function (af) {
                if (!ad[b] || !/i/.test(ad[b])) {
                    try {
                        ad[h] && ad[h]()
                    } catch (ag) {
                    }
                    af = c;
                    c = 0;
                    af ? Z(af[0]) : V(F)
                }
            };
            ad.src = N;
            W = function (af) {
                X && clearTimeout(X);
                ad[A] = ad[s] = ad[m] = null;
                j[E](ad);
                O && j[E](O)
            };
            j[w](ad, (H = j.firstChild));
            O && j[w](O, H);
            X = U > 0 && setTimeout(function () {
                V(D)
            }, U)
        }
        return M
    }

    G.setup = function (H) {
        g.extend(n, H)
    };
    g.jsonp = G
})(jQuery);
(function (b) {
    function a(n, j) {
        var o, p, l, d, h, c, f, m, k, g;
        o = n.length & 3;
        p = n.length - o;
        l = j;
        h = 3432918353;
        f = 461845907;
        g = 0;
        while (g < p) {
            k = ((n.charCodeAt(g) & 255)) | ((n.charCodeAt(++g) & 255) << 8) | ((n.charCodeAt(++g) & 255) << 16) | ((n.charCodeAt(++g) & 255) << 24);
            ++g;
            k = ((((k & 65535) * h) + ((((k >>> 16) * h) & 65535) << 16))) & 4294967295;
            k = (k << 15) | (k >>> 17);
            k = ((((k & 65535) * f) + ((((k >>> 16) * f) & 65535) << 16))) & 4294967295;
            l ^= k;
            l = (l << 13) | (l >>> 19);
            d = ((((l & 65535) * 5) + ((((l >>> 16) * 5) & 65535) << 16))) & 4294967295;
            l = (((d & 65535) + 27492) + ((((d >>> 16) + 58964) & 65535) << 16))
        }
        k = 0;
        switch (o) {
            case 3:
                k ^= (n.charCodeAt(g + 2) & 255) << 16;
            case 2:
                k ^= (n.charCodeAt(g + 1) & 255) << 8;
            case 1:
                k ^= (n.charCodeAt(g) & 255);
                k = (((k & 65535) * h) + ((((k >>> 16) * h) & 65535) << 16)) & 4294967295;
                k = (k << 15) | (k >>> 17);
                k = (((k & 65535) * f) + ((((k >>> 16) * f) & 65535) << 16)) & 4294967295;
                l ^= k
        }
        l ^= n.length;
        l ^= l >>> 16;
        l = (((l & 65535) * 2246822507) + ((((l >>> 16) * 2246822507) & 65535) << 16)) & 4294967295;
        l ^= l >>> 13;
        l = ((((l & 65535) * 3266489909) + ((((l >>> 16) * 3266489909) & 65535) << 16))) & 4294967295;
        l ^= l >>> 16;
        return l >>> 0
    }

    b.murmurhash3 = a
})(jQuery);
CQ_Analytics = window.CQ_Analytics || {};
CQ_Analytics.AAM = CQ_Analytics.AAM || {};
CQ_Analytics.AAM.AudienceMgr = CQ_Analytics.AAM.AudienceMgr || function (g) {
    var f = g.partner || "geometrixx";
    var r = g.destinationNames || {
            CQIntegrationDestination: {
                domain: ".cqclientintegration.adobe.com",
                segkey: "segs",
                keysep: ",",
                valsep: ";"
            }
        };
    var q = g.debug || false;
    var b = g.containerNSID || "0";
    var s = false;
    if (g.simulationPath) {
        s = g.simulationPath + ".segments.json"
    }
    var c = function () {
    };
    if (q) {
        c = function (t) {
            console.log("DEBUG: audiencemanager.js " + t)
        }
    }
    var p = function (t) {
        console.log("ERROR: audiencemanager.js " + t)
    };
    c("Initialise Audience Manager");
    var m = {};
    var d = new CQ_Analytics.JSONStore();
    var k = "http://";
    if ("https:" == document.location.protocol) {
        k = "https://"
    }
    k += encodeURIComponent(f) + ".demdex.net/event?d_cb=?";
    function h(u) {
        var t = {};
        $.each(u, function (y, A) {
            if (r[A.cn]) {
                var x = r[A.cn];
                if (A.dmn.slice(0, x.domain.length) === x.domain) {
                    var w = (x.segkey || "segs") + "=";
                    var z = w.length;
                    var B = x.keysep || ",";
                    var v = x.valsep || ";";
                    $.each(A.cv.split(B), function (D, C) {
                        if (C.slice(0, z) === w) {
                            $.each(C.substring(z).split(v), function (E, F) {
                                t[F] = true
                            })
                        }
                    })
                }
            }
        });
        return t
    }

    function n() {
    }

    function l(t) {
        m = {};
        var u = [];
        $.each(t, function (x, y) {
            if (y) {
                m[x] = true;
                u.push(x)
            }
        });
        u.sort();
        var v = d.getProperty("segments");
        var w = u.join(",");
        if (v !== w) {
            d.setProperty("segments", w);
            c("Set segments to " + w)
        }
    }

    function j(t, v) {
        v = v || n;
        if (s) {
            if (!t.sid) {
                v();
                d.fireEvent("update")
            } else {
                $.getJSON(s, {t: t.sid}, function (w) {
                    if (w.segments) {
                        l(w.segments)
                    }
                    v();
                    d.fireEvent("update")
                }).fail(function (w, y, x) {
                    p("Failed to resolve segments from AAM server  " + y + " error " + x);
                    v();
                    d.fireEvent("update")
                })
            }
        } else {
            var u = {};
            t = t || {};
            $.each(t, function (w, x) {
                if (w === "sid") {
                    u.d_sid = x
                } else {
                    u["c_" + w] = x
                }
            });
            u.d_nsid = b;
            u.d_rtbd = "json";
            $.jsonp({
                url: k, callback: "__aaminvoke", data: u, success: function (w, y, x) {
                    if (w.stuff) {
                        l(h(w.stuff))
                    }
                    v();
                    d.fireEvent("update")
                }, error: function (x, w) {
                    p("Failed to retieve json response " + w);
                    v();
                    d.fireEvent("update")
                }
            })
        }
    }

    function a() {
        return m
    }

    function o(t) {
        return (m[t])
    }

    j(false, function () {
        CQ_Analytics.ClientContextMgr.register(d)
    });
    d.getUserSegments = a;
    d.matches = o;
    d.invoke = j;
    return d
};
if (!CQ_Analytics.SubViagensCDRStore) {
    var url = location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + "/services/cdr/get_profile.jsonp";
    var _udata = {};
    try {
        var _udata = CQ.shared.HTTP.eval(url)
    } catch (e) {
    }
    CQ_Analytics.SubViagensCDRStore = CQ_Analytics.JSONStore.registerNewInstance("subviagens-cdr", _udata)
}
function storeCDREvent(event) {
    var url = location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + "/services/cdr/store_event.jsonp";
    var eventParamValue = "";
    var first = true;
    url = CQ_Analytics.Utils.addParameter(url, "event", parameterizeEvent(event));
    try {
        var returnValue = CQ.shared.HTTP.eval(url);
        if (returnValue) {
            return returnValue.result == "SUCCESS"
        }
    } catch (error) {
    }
    return false
}
function parameterizeEvent(a) {
    var c = "{";
    var b = true;
    for (eventName in a) {
        if (!b) {
            c = c + ","
        } else {
            b = false
        }
        c = c + '"' + eventName + '":"' + a[eventName] + '"'
    }
    c = c + "}";
    return c
};